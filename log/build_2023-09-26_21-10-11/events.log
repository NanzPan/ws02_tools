[0.000000] (-) TimerEvent: {}
[0.000105] (-) JobUnselected: {'identifier': 'cpp01_launch'}
[0.000125] (-) JobUnselected: {'identifier': 'cpp02_rosbag2'}
[0.000139] (kruisee_lidar) JobQueued: {'identifier': 'kruisee_lidar', 'dependencies': OrderedDict()}
[0.000150] (kruisee_lidar) JobStarted: {'identifier': 'kruisee_lidar'}
[0.006641] (kruisee_lidar) JobProgress: {'identifier': 'kruisee_lidar', 'progress': 'cmake'}
[0.007058] (kruisee_lidar) JobProgress: {'identifier': 'kruisee_lidar', 'progress': 'build'}
[0.007477] (kruisee_lidar) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/pz10on/Work/ws02_tools/build/kruisee_lidar', '--', '-j12', '-l12'], 'cwd': '/home/pz10on/Work/ws02_tools/build/kruisee_lidar', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'pz10on'), ('LC_TIME', 'zh_CN.UTF-8'), ('XDG_SESSION_TYPE', 'x11'), ('GIT_ASKPASS', '/usr/share/code/resources/app/extensions/git/dist/askpass.sh'), ('SHLVL', '2'), ('LD_LIBRARY_PATH', '/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/pz10on'), ('CHROME_DESKTOP', 'code-url-handler.desktop'), ('OLDPWD', '/home/pz10on/Work/ws02_tools/src'), ('TERM_PROGRAM_VERSION', '1.73.1'), ('DESKTOP_SESSION', 'ubuntu'), ('GIO_LAUNCHED_DESKTOP_FILE', '/usr/share/applications/code.desktop'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('VSCODE_GIT_ASKPASS_MAIN', '/usr/share/code/resources/app/extensions/git/dist/askpass-main.js'), ('LC_MONETARY', 'zh_CN.UTF-8'), ('VSCODE_GIT_ASKPASS_NODE', '/usr/share/code/code'), ('MANAGERPID', '1727'), ('DBUS_STARTER_BUS_TYPE', 'session'), ('SYSTEMD_EXEC_PID', '2193'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus,guid=861efa825ff62dad0101a02565124f85'), ('COLORTERM', 'truecolor'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '5293'), ('IM_CONFIG_PHASE', '1'), ('ROS_DISTRO', 'humble'), ('GTK_IM_MODULE', 'fcitx'), ('LOGNAME', 'pz10on'), ('JOURNAL_STREAM', '8:34255'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'pz10on'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('PATH', '/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/pz10on-laptop:@/tmp/.ICE-unix/2193,unix/pz10on-laptop:/tmp/.ICE-unix/2193'), ('INVOCATION_ID', 'b82c74bcb8d04df6ba758aa069c65840'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'zh_CN.UTF-8'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/8939da48_1abb_4f65_b67b_e9e1c4893187'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('GDK_BACKEND', 'x11'), ('DISPLAY', ':1'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'Unity'), ('LC_TELEPHONE', 'zh_CN.UTF-8'), ('XMODIFIERS', '@im=fcitx'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('VSCODE_GIT_IPC_HANDLE', '/run/user/1000/vscode-git-1ddad89994.sock'), ('GNOME_TERMINAL_SERVICE', ':1.227'), ('TERM_PROGRAM', 'vscode'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/opt/ros/humble'), ('ORIGINAL_XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('SHELL', '/bin/bash'), ('LC_NAME', 'zh_CN.UTF-8'), ('QT_ACCESSIBILITY', '1'), ('NO_AT_BRIDGE', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'zh_CN.UTF-8'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('LC_IDENTIFICATION', 'zh_CN.UTF-8'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', '--ms-enable-electron-run-as-node'), ('QT_IM_MODULE', 'fcitx'), ('PWD', '/home/pz10on/Work/ws02_tools/build/kruisee_lidar'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('CLUTTER_IM_MODULE', 'fcitx'), ('DBUS_STARTER_ADDRESS', 'unix:path=/run/user/1000/bus,guid=861efa825ff62dad0101a02565124f85'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('LC_NUMERIC', 'zh_CN.UTF-8'), ('LC_PAPER', 'zh_CN.UTF-8'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/opt/ros/humble')]), 'shell': False}
[0.051204] (kruisee_lidar) StdoutLine: {'line': b'[ 94%] Built target sdk_core\n'}
[0.060065] (kruisee_lidar) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target kruisee_lidar_node\x1b[0m\n'}
[0.072678] (kruisee_lidar) StdoutLine: {'line': b'[ 96%] \x1b[32mBuilding CXX object CMakeFiles/kruisee_lidar_node.dir/top/main.cc.o\x1b[0m\n'}
[0.072856] (kruisee_lidar) StdoutLine: {'line': b'[ 98%] \x1b[32mBuilding CXX object CMakeFiles/kruisee_lidar_node.dir/top/node.cc.o\x1b[0m\n'}
[0.099303] (-) TimerEvent: {}
[0.199569] (-) TimerEvent: {}
[0.299866] (-) TimerEvent: {}
[0.400117] (-) TimerEvent: {}
[0.500406] (-) TimerEvent: {}
[0.551164] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[0.551375] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[0.551442] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.551494] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.551547] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.551601] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.551653] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.551707] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.551758] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.551810] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/main.cc:9\x1b[m\x1b[K:\n'}
[0.551864] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:788:36:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvariant\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.551918] (kruisee_lidar) StderrLine: {'line': b'  788 |   using CallbackInfoVariant = std::\x1b[01;31m\x1b[Kvariant\x1b[m\x1b[K<\n'}
[0.551969] (kruisee_lidar) StderrLine: {'line': b'      |                                    \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[0.552020] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:788:31:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::variant\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.552072] (kruisee_lidar) StderrLine: {'line': b'  788 |   using CallbackInfoVariant = \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::variant<\n'}
[0.552123] (kruisee_lidar) StderrLine: {'line': b'      |                               \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.552174] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:794:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KCallbackInfoVariant\x1b[m\x1b[K\xe2\x80\x99 has not been declared\n'}
[0.552225] (kruisee_lidar) StderrLine: {'line': b'  794 |   async_send_request_impl(const Request & request, \x1b[01;31m\x1b[KCallbackInfoVariant\x1b[m\x1b[K value)\n'}
[0.552278] (kruisee_lidar) StderrLine: {'line': b'      |                                                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.552336] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:808:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koptional\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.552390] (kruisee_lidar) StderrLine: {'line': b'  808 |   std::\x1b[01;31m\x1b[Koptional\x1b[m\x1b[K<CallbackInfoVariant>\n'}
[0.552450] (kruisee_lidar) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[0.552502] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:808:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::optional\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.552553] (kruisee_lidar) StderrLine: {'line': b'  808 |   \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::optional<CallbackInfoVariant>\n'}
[0.552603] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.556896] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:830:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KCallbackInfoVariant\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.556992] (kruisee_lidar) StderrLine: {'line': b'  830 |       \x1b[01;31m\x1b[KCallbackInfoVariant\x1b[m\x1b[K>>\n'}
[0.557047] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.557100] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:830:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 2 is invalid\n'}
[0.557154] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:830:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 2 is invalid\n'}
[0.557206] (kruisee_lidar) StderrLine: {'line': b'  830 |       CallbackInfoVariant\x1b[01;31m\x1b[K>>\x1b[m\x1b[K\n'}
[0.557258] (kruisee_lidar) StderrLine: {'line': b'      |                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.557308] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:830:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 5 is invalid\n'}
[0.558225] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Client<ServiceT>::handle_response(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<void>)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.558313] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:550:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koptional\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.558385] (kruisee_lidar) StderrLine: {'line': b'  550 |     std::\x1b[01;31m\x1b[Koptional\x1b[m\x1b[K<CallbackInfoVariant>\n'}
[0.558438] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[0.558491] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:550:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::optional\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.563947] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:550:19:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KCallbackInfoVariant\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.564051] (kruisee_lidar) StderrLine: {'line': b'  550 |     std::optional<\x1b[01;31m\x1b[KCallbackInfoVariant\x1b[m\x1b[K>\n'}
[0.564116] (kruisee_lidar) StderrLine: {'line': b'      |                   \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.566822] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[0.566905] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[0.566964] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.567016] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.567068] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.567120] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.567173] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.567224] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.567274] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.567325] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:11\x1b[m\x1b[K,\n'}
[0.567376] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:9\x1b[m\x1b[K:\n'}
[0.567427] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:788:36:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvariant\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.567479] (kruisee_lidar) StderrLine: {'line': b'  788 |   using CallbackInfoVariant = std::\x1b[01;31m\x1b[Kvariant\x1b[m\x1b[K<\n'}
[0.567531] (kruisee_lidar) StderrLine: {'line': b'      |                                    \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[0.567586] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:788:31:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::variant\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.567639] (kruisee_lidar) StderrLine: {'line': b'  788 |   using CallbackInfoVariant = \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::variant<\n'}
[0.567701] (kruisee_lidar) StderrLine: {'line': b'      |                               \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.567752] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:794:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KCallbackInfoVariant\x1b[m\x1b[K\xe2\x80\x99 has not been declared\n'}
[0.567819] (kruisee_lidar) StderrLine: {'line': b'  794 |   async_send_request_impl(const Request & request, \x1b[01;31m\x1b[KCallbackInfoVariant\x1b[m\x1b[K value)\n'}
[0.567871] (kruisee_lidar) StderrLine: {'line': b'      |                                                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.567923] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:808:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koptional\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.567975] (kruisee_lidar) StderrLine: {'line': b'  808 |   std::\x1b[01;31m\x1b[Koptional\x1b[m\x1b[K<CallbackInfoVariant>\n'}
[0.568028] (kruisee_lidar) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[0.568085] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:808:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::optional\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.568136] (kruisee_lidar) StderrLine: {'line': b'  808 |   \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::optional<CallbackInfoVariant>\n'}
[0.568187] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.568904] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:551:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koptional_pending_request\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kremove_pending_request\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.569050] (kruisee_lidar) StderrLine: {'line': b'  551 |     \x1b[01;31m\x1b[Koptional_pending_request\x1b[m\x1b[K = this->get_and_erase_pending_request(request_header->sequence_number);\n'}
[0.569102] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.569140] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[32m\x1b[Kremove_pending_request\x1b[m\x1b[K\n'}
[0.570144] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:558:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.570227] (kruisee_lidar) StderrLine: {'line': b'  558 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<Promise>(value)) {\n'}
[0.570270] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.570309] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:558:39:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.570348] (kruisee_lidar) StderrLine: {'line': b'  558 |     if (std::holds_alternative<Promise\x1b[01;31m\x1b[K>\x1b[m\x1b[K(value)) {\n'}
[0.570385] (kruisee_lidar) StderrLine: {'line': b'      |                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.570937] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:561:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.570983] (kruisee_lidar) StderrLine: {'line': b'  561 |     } else if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<CallbackTypeValueVariant>(value)) {\n'}
[0.571020] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.571060] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:561:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.571096] (kruisee_lidar) StderrLine: {'line': b'  561 |     } else if (std::holds_alternative<CallbackTypeValueVariant\x1b[01;31m\x1b[K>\x1b[m\x1b[K(value)) {\n'}
[0.571132] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.571788] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:568:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.571828] (kruisee_lidar) StderrLine: {'line': b'  568 |     } else if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<CallbackWithRequestTypeValueVariant>(value)) {\n'}
[0.571864] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.571900] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:568:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.571937] (kruisee_lidar) StderrLine: {'line': b'  568 |     } else if (std::holds_alternative<CallbackWithRequestTypeValueVariant\x1b[01;31m\x1b[K>\x1b[m\x1b[K(value)) {\n'}
[0.571992] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.572102] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool rclcpp::Client<ServiceT>::remove_pending_request(int64_t)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.572141] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:702:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kmissing template arguments before \xe2\x80\x98\x1b[01m\x1b[Kguard\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.572178] (kruisee_lidar) StderrLine: {'line': b'  702 |     std::lock_guard \x1b[01;31m\x1b[Kguard\x1b[m\x1b[K(pending_requests_mutex_);\n'}
[0.572214] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.572252] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:703:30:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Kerase\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.572290] (kruisee_lidar) StderrLine: {'line': b'  703 |     return pending_requests_.\x1b[01;31m\x1b[Kerase\x1b[m\x1b[K(request_id) != 0u;\n'}
[0.572327] (kruisee_lidar) StderrLine: {'line': b'      |                              \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.572363] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Ksize_t rclcpp::Client<ServiceT>::prune_pending_requests()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.572402] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:749:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kmissing template arguments before \xe2\x80\x98\x1b[01m\x1b[Kguard\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.572438] (kruisee_lidar) StderrLine: {'line': b'  749 |     std::lock_guard \x1b[01;31m\x1b[Kguard\x1b[m\x1b[K(pending_requests_mutex_);\n'}
[0.572474] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.572511] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:750:34:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Ksize\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.572550] (kruisee_lidar) StderrLine: {'line': b'  750 |     auto ret = pending_requests_.\x1b[01;31m\x1b[Ksize\x1b[m\x1b[K();\n'}
[0.572588] (kruisee_lidar) StderrLine: {'line': b'      |                                  \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[0.572624] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:751:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Kclear\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.572661] (kruisee_lidar) StderrLine: {'line': b'  751 |     pending_requests_.\x1b[01;31m\x1b[Kclear\x1b[m\x1b[K();\n'}
[0.572726] (kruisee_lidar) StderrLine: {'line': b'      |                       \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.572762] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Ksize_t rclcpp::Client<ServiceT>::prune_requests_older_than(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long int, std::ratio<1, 1000000000> > >, std::vector<long int, AllocatorT>*)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.572801] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:768:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kmissing template arguments before \xe2\x80\x98\x1b[01m\x1b[Kguard\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.572838] (kruisee_lidar) StderrLine: {'line': b'  768 |     std::lock_guard \x1b[01;31m\x1b[Kguard\x1b[m\x1b[K(pending_requests_mutex_);\n'}
[0.572874] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.572914] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:769:39:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Ksize\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.572953] (kruisee_lidar) StderrLine: {'line': b'  769 |     auto old_size = pending_requests_.\x1b[01;31m\x1b[Ksize\x1b[m\x1b[K();\n'}
[0.572990] (kruisee_lidar) StderrLine: {'line': b'      |                                       \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[0.573026] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:770:38:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Kbegin\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.573068] (kruisee_lidar) StderrLine: {'line': b'  770 |     for (auto it = pending_requests_.\x1b[01;31m\x1b[Kbegin\x1b[m\x1b[K(), last = pending_requests_.end(); it != last; ) {\n'}
[0.573106] (kruisee_lidar) StderrLine: {'line': b'      |                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.573143] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:830:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KCallbackInfoVariant\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.573179] (kruisee_lidar) StderrLine: {'line': b'  830 |       \x1b[01;31m\x1b[KCallbackInfoVariant\x1b[m\x1b[K>>\n'}
[0.573215] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.573249] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:830:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 2 is invalid\n'}
[0.573285] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:830:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 2 is invalid\n'}
[0.573321] (kruisee_lidar) StderrLine: {'line': b'  830 |       CallbackInfoVariant\x1b[01;31m\x1b[K>>\x1b[m\x1b[K\n'}
[0.573356] (kruisee_lidar) StderrLine: {'line': b'      |                          \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.573391] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:830:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 5 is invalid\n'}
[0.574148] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Client<ServiceT>::handle_response(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<void>)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.574201] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:550:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koptional\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.574241] (kruisee_lidar) StderrLine: {'line': b'  550 |     std::\x1b[01;31m\x1b[Koptional\x1b[m\x1b[K<CallbackInfoVariant>\n'}
[0.574281] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[0.574378] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:550:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::optional\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.574417] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:770:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Klast\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.574474] (kruisee_lidar) StderrLine: {'line': b'  770 |     for (auto it = pending_requests_.begin(), last = pending_requests_.end(); it != \x1b[01;31m\x1b[Klast\x1b[m\x1b[K; ) {\n'}
[0.574512] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[0.574551] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:775:32:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Kerase\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.574588] (kruisee_lidar) StderrLine: {'line': b'  775 |         it = pending_requests_.\x1b[01;31m\x1b[Kerase\x1b[m\x1b[K(it);\n'}
[0.574627] (kruisee_lidar) StderrLine: {'line': b'      |                                \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.574665] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:780:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Ksize\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.574706] (kruisee_lidar) StderrLine: {'line': b'  780 |     return old_size - pending_requests_.\x1b[01;31m\x1b[Ksize\x1b[m\x1b[K();\n'}
[0.574742] (kruisee_lidar) StderrLine: {'line': b'      |                                         \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[0.574779] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kint64_t rclcpp::Client<ServiceT>::async_send_request_impl(const Request&, int)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.574816] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:802:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Ktry_emplace\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.574855] (kruisee_lidar) StderrLine: {'line': b'  802 |     pending_requests_.\x1b[01;31m\x1b[Ktry_emplace\x1b[m\x1b[K(\n'}
[0.574908] (kruisee_lidar) StderrLine: {'line': b'      |                       \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.580119] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:550:19:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KCallbackInfoVariant\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.580274] (kruisee_lidar) StderrLine: {'line': b'  550 |     std::optional<\x1b[01;31m\x1b[KCallbackInfoVariant\x1b[m\x1b[K>\n'}
[0.580328] (kruisee_lidar) StderrLine: {'line': b'      |                   \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.585463] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:551:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Koptional_pending_request\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kremove_pending_request\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.585587] (kruisee_lidar) StderrLine: {'line': b'  551 |     \x1b[01;31m\x1b[Koptional_pending_request\x1b[m\x1b[K = this->get_and_erase_pending_request(request_header->sequence_number);\n'}
[0.585633] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.585672] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[32m\x1b[Kremove_pending_request\x1b[m\x1b[K\n'}
[0.586410] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:558:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.586497] (kruisee_lidar) StderrLine: {'line': b'  558 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<Promise>(value)) {\n'}
[0.586541] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.586579] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:558:39:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.586626] (kruisee_lidar) StderrLine: {'line': b'  558 |     if (std::holds_alternative<Promise\x1b[01;31m\x1b[K>\x1b[m\x1b[K(value)) {\n'}
[0.586663] (kruisee_lidar) StderrLine: {'line': b'      |                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.587365] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:561:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.587444] (kruisee_lidar) StderrLine: {'line': b'  561 |     } else if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<CallbackTypeValueVariant>(value)) {\n'}
[0.587488] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.587525] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:561:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.587563] (kruisee_lidar) StderrLine: {'line': b'  561 |     } else if (std::holds_alternative<CallbackTypeValueVariant\x1b[01;31m\x1b[K>\x1b[m\x1b[K(value)) {\n'}
[0.587600] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.588168] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:568:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.588244] (kruisee_lidar) StderrLine: {'line': b'  568 |     } else if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<CallbackWithRequestTypeValueVariant>(value)) {\n'}
[0.588294] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.588361] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:568:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.588459] (kruisee_lidar) StderrLine: {'line': b'  568 |     } else if (std::holds_alternative<CallbackWithRequestTypeValueVariant\x1b[01;31m\x1b[K>\x1b[m\x1b[K(value)) {\n'}
[0.588496] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.588533] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool rclcpp::Client<ServiceT>::remove_pending_request(int64_t)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.588570] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:702:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kmissing template arguments before \xe2\x80\x98\x1b[01m\x1b[Kguard\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.588607] (kruisee_lidar) StderrLine: {'line': b'  702 |     std::lock_guard \x1b[01;31m\x1b[Kguard\x1b[m\x1b[K(pending_requests_mutex_);\n'}
[0.588643] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.588679] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:703:30:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Kerase\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.588718] (kruisee_lidar) StderrLine: {'line': b'  703 |     return pending_requests_.\x1b[01;31m\x1b[Kerase\x1b[m\x1b[K(request_id) != 0u;\n'}
[0.588757] (kruisee_lidar) StderrLine: {'line': b'      |                              \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.588793] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Ksize_t rclcpp::Client<ServiceT>::prune_pending_requests()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.588830] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:749:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kmissing template arguments before \xe2\x80\x98\x1b[01m\x1b[Kguard\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.588865] (kruisee_lidar) StderrLine: {'line': b'  749 |     std::lock_guard \x1b[01;31m\x1b[Kguard\x1b[m\x1b[K(pending_requests_mutex_);\n'}
[0.588904] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.588939] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:750:34:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Ksize\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.588983] (kruisee_lidar) StderrLine: {'line': b'  750 |     auto ret = pending_requests_.\x1b[01;31m\x1b[Ksize\x1b[m\x1b[K();\n'}
[0.589019] (kruisee_lidar) StderrLine: {'line': b'      |                                  \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[0.589055] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:751:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Kclear\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.589102] (kruisee_lidar) StderrLine: {'line': b'  751 |     pending_requests_.\x1b[01;31m\x1b[Kclear\x1b[m\x1b[K();\n'}
[0.589152] (kruisee_lidar) StderrLine: {'line': b'      |                       \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.589197] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Ksize_t rclcpp::Client<ServiceT>::prune_requests_older_than(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long int, std::ratio<1, 1000000000> > >, std::vector<long int, AllocatorT>*)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.589241] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:768:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kmissing template arguments before \xe2\x80\x98\x1b[01m\x1b[Kguard\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.589289] (kruisee_lidar) StderrLine: {'line': b'  768 |     std::lock_guard \x1b[01;31m\x1b[Kguard\x1b[m\x1b[K(pending_requests_mutex_);\n'}
[0.589326] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.589363] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:769:39:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Ksize\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.589401] (kruisee_lidar) StderrLine: {'line': b'  769 |     auto old_size = pending_requests_.\x1b[01;31m\x1b[Ksize\x1b[m\x1b[K();\n'}
[0.589437] (kruisee_lidar) StderrLine: {'line': b'      |                                       \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[0.589473] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:770:38:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Kbegin\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.589518] (kruisee_lidar) StderrLine: {'line': b'  770 |     for (auto it = pending_requests_.\x1b[01;31m\x1b[Kbegin\x1b[m\x1b[K(), last = pending_requests_.end(); it != last; ) {\n'}
[0.589555] (kruisee_lidar) StderrLine: {'line': b'      |                                      \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.590738] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:770:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Klast\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.590781] (kruisee_lidar) StderrLine: {'line': b'  770 |     for (auto it = pending_requests_.begin(), last = pending_requests_.end(); it != \x1b[01;31m\x1b[Klast\x1b[m\x1b[K; ) {\n'}
[0.590820] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[0.590889] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:775:32:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Kerase\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.590928] (kruisee_lidar) StderrLine: {'line': b'  775 |         it = pending_requests_.\x1b[01;31m\x1b[Kerase\x1b[m\x1b[K(it);\n'}
[0.590964] (kruisee_lidar) StderrLine: {'line': b'      |                                \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.591001] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:780:41:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Ksize\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.591039] (kruisee_lidar) StderrLine: {'line': b'  780 |     return old_size - pending_requests_.\x1b[01;31m\x1b[Ksize\x1b[m\x1b[K();\n'}
[0.591074] (kruisee_lidar) StderrLine: {'line': b'      |                                         \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[0.591111] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kint64_t rclcpp::Client<ServiceT>::async_send_request_impl(const Request&, int)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.591147] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:802:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Krequest for member \xe2\x80\x98\x1b[01m\x1b[Ktry_emplace\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[K((rclcpp::Client<ServiceT>*)this)->rclcpp::Client<ServiceT>::pending_requests_\x1b[m\x1b[K\xe2\x80\x99, which is of non-class type \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.591187] (kruisee_lidar) StderrLine: {'line': b'  802 |     pending_requests_.\x1b[01;31m\x1b[Ktry_emplace\x1b[m\x1b[K(\n'}
[0.591224] (kruisee_lidar) StderrLine: {'line': b'      |                       \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.600510] (-) TimerEvent: {}
[0.604617] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/service.hpp:36\x1b[m\x1b[K,\n'}
[0.604922] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:28\x1b[m\x1b[K,\n'}
[0.604992] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[0.605033] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.605082] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.605136] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.605192] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.605247] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.605305] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.605362] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.605420] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/main.cc:9\x1b[m\x1b[K:\n'}
[0.605466] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K At global scope:\n'}
[0.605503] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:47:31:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvoid_t\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.605542] (kruisee_lidar) StderrLine: {'line': b'   47 | struct can_be_nullptr<T, std::\x1b[01;31m\x1b[Kvoid_t\x1b[m\x1b[K<\n'}
[0.605579] (kruisee_lidar) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[0.605616] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:47:31:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::void_t\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.605653] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:47:31:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvoid_t\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.605694] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:47:31:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::void_t\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.605732] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:48:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 2 is invalid\n'}
[0.605771] (kruisee_lidar) StderrLine: {'line': b'   48 |     decltype(std::declval<T>() == nullptr), decltype(std::declval<T &>() = nullptr)\x1b[01;31m\x1b[K>>\x1b[m\x1b[K\n'}
[0.605940] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.605993] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:226:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvariant\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.606035] (kruisee_lidar) StderrLine: {'line': b'  226 |   std::\x1b[01;31m\x1b[Kvariant\x1b[m\x1b[K<\n'}
[0.606077] (kruisee_lidar) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[0.606115] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:226:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::variant\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.606154] (kruisee_lidar) StderrLine: {'line': b'  226 |   \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::variant<\n'}
[0.606193] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.606230] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<ServiceT>::AnyServiceCallback()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.606269] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:62:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kclass \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<ServiceT>\x1b[m\x1b[K\xe2\x80\x99 does not have any field named \xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.606306] (kruisee_lidar) StderrLine: {'line': b'   62 |   : \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K(std::monostate{})\n'}
[0.606343] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.606379] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:62:20:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kmonostate\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.606416] (kruisee_lidar) StderrLine: {'line': b'   62 |   : callback_(std::\x1b[01;31m\x1b[Kmonostate\x1b[m\x1b[K{})\n'}
[0.606452] (kruisee_lidar) StderrLine: {'line': b'      |                    \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.608568] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.608676] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:78:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.608727] (kruisee_lidar) StderrLine: {'line': b'   78 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrCallback>(callback);\n'}
[0.608767] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.608804] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.608843] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:78:51:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.608880] (kruisee_lidar) StderrLine: {'line': b'   78 |       callback_.template emplace<SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.608918] (kruisee_lidar) StderrLine: {'line': b'      |                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.611130] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:85:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.611269] (kruisee_lidar) StderrLine: {'line': b'   85 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrWithRequestHeaderCallback>(callback);\n'}
[0.611321] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.611359] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.611397] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:85:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.611436] (kruisee_lidar) StderrLine: {'line': b'   85 |       callback_.template emplace<SharedPtrWithRequestHeaderCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.611473] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.613853] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:92:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.613905] (kruisee_lidar) StderrLine: {'line': b'   92 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrDeferResponseCallback>(callback);\n'}
[0.613942] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.613978] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.614015] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:92:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.614052] (kruisee_lidar) StderrLine: {'line': b'   92 |       callback_.template emplace<SharedPtrDeferResponseCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.614087] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.616416] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:99:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.616531] (kruisee_lidar) StderrLine: {'line': b'   99 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle>(callback);\n'}
[0.616586] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.616639] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.616686] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:99:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.616731] (kruisee_lidar) StderrLine: {'line': b'   99 |       callback_.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.616774] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.618835] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:103:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.618970] (kruisee_lidar) StderrLine: {'line': b'  103 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K = std::forward<CallbackT>(callback);\n'}
[0.619023] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.619062] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.621435] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.621492] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:123:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.621532] (kruisee_lidar) StderrLine: {'line': b'  123 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrCallback>(callback);\n'}
[0.621569] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.621606] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.621643] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:123:51:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.621681] (kruisee_lidar) StderrLine: {'line': b'  123 |       callback_.template emplace<SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.621726] (kruisee_lidar) StderrLine: {'line': b'      |                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.622666] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/service.hpp:36\x1b[m\x1b[K,\n'}
[0.622706] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:28\x1b[m\x1b[K,\n'}
[0.622745] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[0.622780] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.622816] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.622851] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.622946] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.623000] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.623037] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.623073] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.623109] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:11\x1b[m\x1b[K,\n'}
[0.623145] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:9\x1b[m\x1b[K:\n'}
[0.623184] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K At global scope:\n'}
[0.623219] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:47:31:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvoid_t\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.623258] (kruisee_lidar) StderrLine: {'line': b'   47 | struct can_be_nullptr<T, std::\x1b[01;31m\x1b[Kvoid_t\x1b[m\x1b[K<\n'}
[0.623295] (kruisee_lidar) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K^~~~~~\x1b[m\x1b[K\n'}
[0.623330] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:47:31:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::void_t\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.623367] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:47:31:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvoid_t\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.623403] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:47:31:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::void_t\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.623439] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:48:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 2 is invalid\n'}
[0.623475] (kruisee_lidar) StderrLine: {'line': b'   48 |     decltype(std::declval<T>() == nullptr), decltype(std::declval<T &>() = nullptr)\x1b[01;31m\x1b[K>>\x1b[m\x1b[K\n'}
[0.623511] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.623546] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:226:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvariant\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.623584] (kruisee_lidar) StderrLine: {'line': b'  226 |   std::\x1b[01;31m\x1b[Kvariant\x1b[m\x1b[K<\n'}
[0.623620] (kruisee_lidar) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[0.623656] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:226:3:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::variant\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.623693] (kruisee_lidar) StderrLine: {'line': b'  226 |   \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::variant<\n'}
[0.623730] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.623780] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<ServiceT>::AnyServiceCallback()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.623836] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:62:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kclass \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnyServiceCallback<ServiceT>\x1b[m\x1b[K\xe2\x80\x99 does not have any field named \xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.623878] (kruisee_lidar) StderrLine: {'line': b'   62 |   : \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K(std::monostate{})\n'}
[0.623948] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.623985] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:130:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.624028] (kruisee_lidar) StderrLine: {'line': b'  130 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrWithRequestHeaderCallback>(callback);\n'}
[0.624095] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.624137] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.624175] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:130:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.624217] (kruisee_lidar) StderrLine: {'line': b'  130 |       callback_.template emplace<SharedPtrWithRequestHeaderCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.624255] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.624294] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:62:20:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kmonostate\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.624332] (kruisee_lidar) StderrLine: {'line': b'   62 |   : callback_(std::\x1b[01;31m\x1b[Kmonostate\x1b[m\x1b[K{})\n'}
[0.624369] (kruisee_lidar) StderrLine: {'line': b'      |                    \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.626385] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:137:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.626450] (kruisee_lidar) StderrLine: {'line': b'  137 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrDeferResponseCallback>(callback);\n'}
[0.626489] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.626530] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.626566] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:137:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.626604] (kruisee_lidar) StderrLine: {'line': b'  137 |       callback_.template emplace<SharedPtrDeferResponseCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.626641] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.626770] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.626810] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:78:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.626849] (kruisee_lidar) StderrLine: {'line': b'   78 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrCallback>(callback);\n'}
[0.626896] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.626934] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.626971] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:78:51:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.627009] (kruisee_lidar) StderrLine: {'line': b'   78 |       callback_.template emplace<SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.627044] (kruisee_lidar) StderrLine: {'line': b'      |                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.628618] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:144:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.628663] (kruisee_lidar) StderrLine: {'line': b'  144 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle>(callback);\n'}
[0.628700] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.628736] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.628771] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:144:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.628808] (kruisee_lidar) StderrLine: {'line': b'  144 |       callback_.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.628845] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.629336] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:85:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.629434] (kruisee_lidar) StderrLine: {'line': b'   85 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrWithRequestHeaderCallback>(callback);\n'}
[0.629488] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.629534] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.629572] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:85:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.629611] (kruisee_lidar) StderrLine: {'line': b'   85 |       callback_.template emplace<SharedPtrWithRequestHeaderCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.629648] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.631041] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:148:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.631127] (kruisee_lidar) StderrLine: {'line': b'  148 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K = std::forward<CallbackT>(callback);\n'}
[0.631171] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.631217] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.631773] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:92:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.631861] (kruisee_lidar) StderrLine: {'line': b'   92 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrDeferResponseCallback>(callback);\n'}
[0.631907] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.631945] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.631981] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:92:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.632022] (kruisee_lidar) StderrLine: {'line': b'   92 |       callback_.template emplace<SharedPtrDeferResponseCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.632059] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.632128] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<typename ServiceT::Response> rclcpp::AnyServiceCallback<ServiceT>::dispatch(const std::shared_ptr<rclcpp::Service<ServiceT> >&, const std::shared_ptr<rmw_request_id_s>&, std::shared_ptr<typename ServiceT::Request>)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.632181] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:160:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.632219] (kruisee_lidar) StderrLine: {'line': b'  160 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<std::monostate>(callback_)) {\n'}
[0.632255] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.632890] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:160:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kmonostate\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.632967] (kruisee_lidar) StderrLine: {'line': b'  160 |     if (std::holds_alternative<std::\x1b[01;31m\x1b[Kmonostate\x1b[m\x1b[K>(callback_)) {\n'}
[0.633010] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.634331] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:99:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.634408] (kruisee_lidar) StderrLine: {'line': b'   99 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle>(callback);\n'}
[0.634451] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.634489] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.634526] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:99:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.634563] (kruisee_lidar) StderrLine: {'line': b'   99 |       callback_.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.634601] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.635806] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:160:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.635888] (kruisee_lidar) StderrLine: {'line': b'  160 |     if (std::holds_alternative<std::monostate>(\x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K)) {\n'}
[0.635930] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.636598] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:165:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.636675] (kruisee_lidar) StderrLine: {'line': b'  165 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrDeferResponseCallback>(callback_)) {\n'}
[0.636718] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.636757] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:165:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.636794] (kruisee_lidar) StderrLine: {'line': b'  165 |     if (std::holds_alternative<SharedPtrDeferResponseCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_)) {\n'}
[0.636830] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.636867] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:103:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.636905] (kruisee_lidar) StderrLine: {'line': b'  103 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K = std::forward<CallbackT>(callback);\n'}
[0.636941] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.636977] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.639018] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.639107] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:123:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.639154] (kruisee_lidar) StderrLine: {'line': b'  123 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrCallback>(callback);\n'}
[0.639193] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.639229] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.639266] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:123:51:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.639304] (kruisee_lidar) StderrLine: {'line': b'  123 |       callback_.template emplace<SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.639339] (kruisee_lidar) StderrLine: {'line': b'      |                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.639536] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:165:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.639615] (kruisee_lidar) StderrLine: {'line': b'  165 |     if (std::holds_alternative<SharedPtrDeferResponseCallback>(\x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K)) {\n'}
[0.639659] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.640468] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:170:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.640545] (kruisee_lidar) StderrLine: {'line': b'  170 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrDeferResponseCallbackWithServiceHandle>(callback_)) {\n'}
[0.640588] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.640627] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:170:79:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.640665] (kruisee_lidar) StderrLine: {'line': b'  170 |     if (std::holds_alternative<SharedPtrDeferResponseCallbackWithServiceHandle\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_)) {\n'}
[0.640701] (kruisee_lidar) StderrLine: {'line': b'      |                                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.641326] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:130:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.641401] (kruisee_lidar) StderrLine: {'line': b'  130 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrWithRequestHeaderCallback>(callback);\n'}
[0.641445] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.641482] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.641519] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:130:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.641557] (kruisee_lidar) StderrLine: {'line': b'  130 |       callback_.template emplace<SharedPtrWithRequestHeaderCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.641593] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.643326] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:170:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.643404] (kruisee_lidar) StderrLine: {'line': b'  170 |     if (std::holds_alternative<SharedPtrDeferResponseCallbackWithServiceHandle>(\x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K)) {\n'}
[0.643488] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.643529] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:137:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.643574] (kruisee_lidar) StderrLine: {'line': b'  137 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrDeferResponseCallback>(callback);\n'}
[0.643611] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.643648] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.643683] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:137:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.643720] (kruisee_lidar) StderrLine: {'line': b'  137 |       callback_.template emplace<SharedPtrDeferResponseCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.643757] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.644194] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:177:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.644274] (kruisee_lidar) StderrLine: {'line': b'  177 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrCallback>(callback_)) {\n'}
[0.644320] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.644359] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:177:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.644402] (kruisee_lidar) StderrLine: {'line': b'  177 |     if (std::holds_alternative<SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_)) {\n'}
[0.644453] (kruisee_lidar) StderrLine: {'line': b'      |                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.645853] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:144:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.645931] (kruisee_lidar) StderrLine: {'line': b'  144 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle>(callback);\n'}
[0.645974] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.646012] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.646049] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:144:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.646085] (kruisee_lidar) StderrLine: {'line': b'  144 |       callback_.template emplace<SharedPtrDeferResponseCallbackWithServiceHandle\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback);\n'}
[0.646123] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.646997] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:177:51:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.647074] (kruisee_lidar) StderrLine: {'line': b'  177 |     if (std::holds_alternative<SharedPtrCallback>(\x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K)) {\n'}
[0.647117] (kruisee_lidar) StderrLine: {'line': b'      |                                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.647868] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:181:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.647944] (kruisee_lidar) StderrLine: {'line': b'  181 |     } else if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrWithRequestHeaderCallback>(callback_)) {\n'}
[0.647987] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.648043] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:181:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.648082] (kruisee_lidar) StderrLine: {'line': b'  181 |     } else if (std::holds_alternative<SharedPtrWithRequestHeaderCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_)) {\n'}
[0.648119] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.648156] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::register_callback_for_tracing()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.648194] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:192:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.648230] (kruisee_lidar) StderrLine: {'line': b'  192 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.648266] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.648301] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:192:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.648338] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:148:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope; did you mean \xe2\x80\x98\x1b[01m\x1b[Kcallback\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.648374] (kruisee_lidar) StderrLine: {'line': b'  148 |       \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K = std::forward<CallbackT>(callback);\n'}
[0.648411] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.648448] (kruisee_lidar) StderrLine: {'line': b'      |       \x1b[32m\x1b[Kcallback\x1b[m\x1b[K\n'}
[0.649103] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<typename ServiceT::Response> rclcpp::AnyServiceCallback<ServiceT>::dispatch(const std::shared_ptr<rclcpp::Service<ServiceT> >&, const std::shared_ptr<rmw_request_id_s>&, std::shared_ptr<typename ServiceT::Request>)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.649181] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:160:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.649231] (kruisee_lidar) StderrLine: {'line': b'  160 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<std::monostate>(callback_)) {\n'}
[0.649270] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.649711] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:160:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kmonostate\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.649792] (kruisee_lidar) StderrLine: {'line': b'  160 |     if (std::holds_alternative<std::\x1b[01;31m\x1b[Kmonostate\x1b[m\x1b[K>(callback_)) {\n'}
[0.649836] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.650799] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:198:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.650881] (kruisee_lidar) StderrLine: {'line': b'  198 |       }, \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K);\n'}
[0.650926] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.652514] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:160:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.652599] (kruisee_lidar) StderrLine: {'line': b'  160 |     if (std::holds_alternative<std::monostate>(\x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K)) {\n'}
[0.652643] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.653392] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:165:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.653485] (kruisee_lidar) StderrLine: {'line': b'  165 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrDeferResponseCallback>(callback_)) {\n'}
[0.653539] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.653578] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:165:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.653615] (kruisee_lidar) StderrLine: {'line': b'  165 |     if (std::holds_alternative<SharedPtrDeferResponseCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_)) {\n'}
[0.653652] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.656391] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:165:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.656466] (kruisee_lidar) StderrLine: {'line': b'  165 |     if (std::holds_alternative<SharedPtrDeferResponseCallback>(\x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K)) {\n'}
[0.656505] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.657454] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:170:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.657501] (kruisee_lidar) StderrLine: {'line': b'  170 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrDeferResponseCallbackWithServiceHandle>(callback_)) {\n'}
[0.657547] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.657586] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:170:79:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.657624] (kruisee_lidar) StderrLine: {'line': b'  170 |     if (std::holds_alternative<SharedPtrDeferResponseCallbackWithServiceHandle\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_)) {\n'}
[0.657661] (kruisee_lidar) StderrLine: {'line': b'      |                                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.658910] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[0.658985] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[0.659025] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[0.659062] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.659098] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.659135] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.659178] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.659214] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.659255] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.659291] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.659326] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/main.cc:9\x1b[m\x1b[K:\n'}
[0.659361] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K At global scope:\n'}
[0.659396] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:171:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvariant\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.659435] (kruisee_lidar) StderrLine: {'line': b'  171 |   using variant_type = std::\x1b[01;31m\x1b[Kvariant\x1b[m\x1b[K<\n'}
[0.659471] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[0.659506] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:171:24:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::variant\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.659543] (kruisee_lidar) StderrLine: {'line': b'  171 |   using variant_type = \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::variant<\n'}
[0.659577] (kruisee_lidar) StderrLine: {'line': b'      |                        \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.659611] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:201:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvariant\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.659649] (kruisee_lidar) StderrLine: {'line': b'  201 |   using variant_type = std::\x1b[01;31m\x1b[Kvariant\x1b[m\x1b[K<\n'}
[0.659684] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[0.659719] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:201:24:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::variant\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.659754] (kruisee_lidar) StderrLine: {'line': b'  201 |   using variant_type = \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::variant<\n'}
[0.659789] (kruisee_lidar) StderrLine: {'line': b'      |                        \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.660455] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:170:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.660498] (kruisee_lidar) StderrLine: {'line': b'  170 |     if (std::holds_alternative<SharedPtrDeferResponseCallbackWithServiceHandle>(\x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K)) {\n'}
[0.660534] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.660811] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch(std::shared_ptr<typename rclcpp::TypeAdapter<MessageT>::ros_message_type>, const rclcpp::MessageInfo&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.660855] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:504:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.660907] (kruisee_lidar) StderrLine: {'line': b'  504 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.660943] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.660979] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:504:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.661575] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:177:14:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.661618] (kruisee_lidar) StderrLine: {'line': b'  177 |     if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrCallback>(callback_)) {\n'}
[0.661656] (kruisee_lidar) StderrLine: {'line': b'      |              \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.661693] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:177:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.661730] (kruisee_lidar) StderrLine: {'line': b'  177 |     if (std::holds_alternative<SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_)) {\n'}
[0.661766] (kruisee_lidar) StderrLine: {'line': b'      |                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.661803] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In lambda function:\n'}
[0.661843] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:510:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.661882] (kruisee_lidar) StderrLine: {'line': b'  510 |         if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefCallback>) {\n'}
[0.661919] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.661955] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.661991] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:510:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.662028] (kruisee_lidar) StderrLine: {'line': b'  510 |         if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefCallback>) {\n'}
[0.662064] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.662151] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:510:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.662191] (kruisee_lidar) StderrLine: {'line': b'  510 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.662228] (kruisee_lidar) StderrLine: {'line': b'      |                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.662266] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:510:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.662303] (kruisee_lidar) StderrLine: {'line': b'  510 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.662341] (kruisee_lidar) StderrLine: {'line': b'      |                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.662377] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:518:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.662414] (kruisee_lidar) StderrLine: {'line': b'  518 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.662449] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.662485] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.662522] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:518:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.662559] (kruisee_lidar) StderrLine: {'line': b'  518 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.662644] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.662685] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:518:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.662723] (kruisee_lidar) StderrLine: {'line': b'  518 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT\n'}
[0.662759] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.662795] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:518:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.662831] (kruisee_lidar) StderrLine: {'line': b'  518 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT\n'}
[0.662877] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.662916] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:521:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.662953] (kruisee_lidar) StderrLine: {'line': b'  521 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrCallback>) {\n'}
[0.662989] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.663024] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.663105] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:521:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.663147] (kruisee_lidar) StderrLine: {'line': b'  521 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrCallback>) {\n'}
[0.663184] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.663224] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:521:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.663261] (kruisee_lidar) StderrLine: {'line': b'  521 |         } else if constexpr (is_ta && std::is_same_v<T, UniquePtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.663297] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.663333] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:521:75:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.663369] (kruisee_lidar) StderrLine: {'line': b'  521 |         } else if constexpr (is_ta && std::is_same_v<T, UniquePtrCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.663405] (kruisee_lidar) StderrLine: {'line': b'      |                                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.663441] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:523:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.663480] (kruisee_lidar) StderrLine: {'line': b'  523 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoCallback>) {\n'}
[0.663516] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.663601] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.663639] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:523:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.663678] (kruisee_lidar) StderrLine: {'line': b'  523 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoCallback>) {\n'}
[0.663716] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.663752] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:523:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.663789] (kruisee_lidar) StderrLine: {'line': b'  523 |         } else if constexpr (is_ta && std::is_same_v<T, UniquePtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.663825] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.663860] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:523:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.663896] (kruisee_lidar) StderrLine: {'line': b'  523 |         } else if constexpr (is_ta && std::is_same_v<T, UniquePtrWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.663931] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.663967] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:527:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.664026] (kruisee_lidar) StderrLine: {'line': b'  527 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrCallback>||\n'}
[0.664097] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.664135] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.664172] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:527:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.664208] (kruisee_lidar) StderrLine: {'line': b'  527 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrCallback>||\n'}
[0.664244] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.664280] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:527:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.664319] (kruisee_lidar) StderrLine: {'line': b'  527 |             std::is_same_v<T, SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.664355] (kruisee_lidar) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.664391] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:527:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.664427] (kruisee_lidar) StderrLine: {'line': b'  527 |             std::is_same_v<T, SharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.664463] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.664542] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:528:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.664581] (kruisee_lidar) StderrLine: {'line': b'  528 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrCallback>||\n'}
[0.664618] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.664655] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.664691] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:528:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.664731] (kruisee_lidar) StderrLine: {'line': b'  528 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrCallback>||\n'}
[0.664786] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.664823] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:528:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.664859] (kruisee_lidar) StderrLine: {'line': b'  528 |             std::is_same_v<T, ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.664896] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.664932] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:528:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.665008] (kruisee_lidar) StderrLine: {'line': b'  528 |             std::is_same_v<T, ConstRefSharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.665046] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.665085] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:529:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.665124] (kruisee_lidar) StderrLine: {'line': b'  529 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrCallback>\n'}
[0.665162] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.665198] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.665234] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:529:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.665270] (kruisee_lidar) StderrLine: {'line': b'  529 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrCallback>\n'}
[0.665306] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.665342] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:529:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.665379] (kruisee_lidar) StderrLine: {'line': b'  529 |             std::is_same_v<T, SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.665472] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.665511] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:530:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.665548] (kruisee_lidar) StderrLine: {'line': b'  530 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.665585] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.665621] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:177:51:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.665657] (kruisee_lidar) StderrLine: {'line': b'  177 |     if (std::holds_alternative<SharedPtrCallback>(\x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K)) {\n'}
[0.665693] (kruisee_lidar) StderrLine: {'line': b'      |                                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.665729] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:535:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.665769] (kruisee_lidar) StderrLine: {'line': b'  535 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoCallback>||\n'}
[0.665834] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.665936] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.665976] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:535:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.666025] (kruisee_lidar) StderrLine: {'line': b'  535 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoCallback>||\n'}
[0.666081] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.666269] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:535:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.666403] (kruisee_lidar) StderrLine: {'line': b'  535 |             std::is_same_v<T, SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.666462] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.666564] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:535:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.666621] (kruisee_lidar) StderrLine: {'line': b'  535 |             std::is_same_v<T, SharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.666674] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.666728] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:536:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.666794] (kruisee_lidar) StderrLine: {'line': b'  536 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoCallback>||\n'}
[0.666951] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.667021] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.667089] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:536:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.667149] (kruisee_lidar) StderrLine: {'line': b'  536 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoCallback>||\n'}
[0.667207] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.667269] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:536:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.667331] (kruisee_lidar) StderrLine: {'line': b'  536 |             std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.667399] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.667545] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:536:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.667607] (kruisee_lidar) StderrLine: {'line': b'  536 |             std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.667670] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.667741] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:181:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.667811] (kruisee_lidar) StderrLine: {'line': b'  181 |     } else if (std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrWithRequestHeaderCallback>(callback_)) {\n'}
[0.667882] (kruisee_lidar) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.667953] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:181:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.668016] (kruisee_lidar) StderrLine: {'line': b'  181 |     } else if (std::holds_alternative<SharedPtrWithRequestHeaderCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_)) {\n'}
[0.668143] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.668203] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:537:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.668265] (kruisee_lidar) StderrLine: {'line': b'  537 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoCallback>\n'}
[0.668328] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.668385] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.668437] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::register_callback_for_tracing()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.668593] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:192:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.668661] (kruisee_lidar) StderrLine: {'line': b'  192 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.668702] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.668740] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:537:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.668778] (kruisee_lidar) StderrLine: {'line': b'  537 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoCallback>\n'}
[0.668815] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.668851] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:192:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.668888] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:537:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.668925] (kruisee_lidar) StderrLine: {'line': b'  537 |             std::is_same_v<T, SharedPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.668971] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.669011] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:538:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.669050] (kruisee_lidar) StderrLine: {'line': b'  538 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.669089] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.669154] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:543:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.669195] (kruisee_lidar) StderrLine: {'line': b'  543 |         else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefROSMessageCallback>) {  // NOLINT\n'}
[0.669233] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.669272] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.669310] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:543:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.669349] (kruisee_lidar) StderrLine: {'line': b'  543 |         else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefROSMessageCallback>) {  // NOLINT\n'}
[0.669388] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.669428] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:543:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.669520] (kruisee_lidar) StderrLine: {'line': b'  543 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT\n'}
[0.669560] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.669641] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:543:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.669681] (kruisee_lidar) StderrLine: {'line': b'  543 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT\n'}
[0.669721] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.669761] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:545:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.669802] (kruisee_lidar) StderrLine: {'line': b'  545 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoROSMessageCallback>) {\n'}
[0.669845] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.669886] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.669926] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:545:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.669967] (kruisee_lidar) StderrLine: {'line': b'  545 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoROSMessageCallback>) {\n'}
[0.670009] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.670096] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:545:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.670138] (kruisee_lidar) StderrLine: {'line': b'  545 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.670210] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.670252] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:545:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.670292] (kruisee_lidar) StderrLine: {'line': b'  545 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.670330] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.670369] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:547:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.670408] (kruisee_lidar) StderrLine: {'line': b'  547 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrROSMessageCallback>) {\n'}
[0.670448] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.670487] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.670525] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:547:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.670563] (kruisee_lidar) StderrLine: {'line': b'  547 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrROSMessageCallback>) {\n'}
[0.670609] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.670651] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:547:75:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.670693] (kruisee_lidar) StderrLine: {'line': b'  547 |         } else if constexpr (std::is_same_v<T, UniquePtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.670733] (kruisee_lidar) StderrLine: {'line': b'      |                                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.670773] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:547:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.670812] (kruisee_lidar) StderrLine: {'line': b'  547 |         } else if constexpr (std::is_same_v<T, UniquePtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.670852] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.670997] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:549:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.671046] (kruisee_lidar) StderrLine: {'line': b'  549 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoROSMessageCallback>) {\n'}
[0.671084] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.671127] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.671232] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:549:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.671272] (kruisee_lidar) StderrLine: {'line': b'  549 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoROSMessageCallback>) {\n'}
[0.671308] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.671347] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:549:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.671386] (kruisee_lidar) StderrLine: {'line': b'  549 |         } else if constexpr (std::is_same_v<T, UniquePtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.671424] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.671461] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:549:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.671500] (kruisee_lidar) StderrLine: {'line': b'  549 |         } else if constexpr (std::is_same_v<T, UniquePtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.671537] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.671575] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:552:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.671618] (kruisee_lidar) StderrLine: {'line': b'  552 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrROSMessageCallback>||\n'}
[0.671730] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.671770] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.671807] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:552:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.671845] (kruisee_lidar) StderrLine: {'line': b'  552 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrROSMessageCallback>||\n'}
[0.671885] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.671924] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:552:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.671967] (kruisee_lidar) StderrLine: {'line': b'  552 |           std::is_same_v<T, SharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.672005] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.672042] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:552:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.672080] (kruisee_lidar) StderrLine: {'line': b'  552 |           std::is_same_v<T, SharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.672118] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.672164] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:553:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.672206] (kruisee_lidar) StderrLine: {'line': b'  553 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrROSMessageCallback>||\n'}
[0.672245] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.672313] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.672351] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:553:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.672389] (kruisee_lidar) StderrLine: {'line': b'  553 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrROSMessageCallback>||\n'}
[0.672428] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.672465] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:553:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.672505] (kruisee_lidar) StderrLine: {'line': b'  553 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.672544] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.672583] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:553:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.672666] (kruisee_lidar) StderrLine: {'line': b'  553 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.672712] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.672880] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:198:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kcallback_\x1b[m\x1b[K\xe2\x80\x99 was not declared in this scope\n'}
[0.672959] (kruisee_lidar) StderrLine: {'line': b'  198 |       }, \x1b[01;31m\x1b[Kcallback_\x1b[m\x1b[K);\n'}
[0.673006] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.673067] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:554:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.673111] (kruisee_lidar) StderrLine: {'line': b'  554 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrROSMessageCallback>)\n'}
[0.673149] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.673251] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.673294] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:554:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.673335] (kruisee_lidar) StderrLine: {'line': b'  554 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrROSMessageCallback>)\n'}
[0.673378] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.673420] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:554:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.673473] (kruisee_lidar) StderrLine: {'line': b'  554 |           std::is_same_v<T, SharedPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.673525] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.673577] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:554:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.673628] (kruisee_lidar) StderrLine: {'line': b'  554 |           std::is_same_v<T, SharedPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.673680] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.673737] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:558:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.673875] (kruisee_lidar) StderrLine: {'line': b'  558 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.673927] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.673976] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.674020] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:558:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.674066] (kruisee_lidar) StderrLine: {'line': b'  558 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.674111] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.674157] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:558:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.674209] (kruisee_lidar) StderrLine: {'line': b'  558 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.674254] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.674299] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:558:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.674343] (kruisee_lidar) StderrLine: {'line': b'  558 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.674387] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.674434] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:559:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.674512] (kruisee_lidar) StderrLine: {'line': b'  559 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.674563] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.674649] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.674696] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:559:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.674741] (kruisee_lidar) StderrLine: {'line': b'  559 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.674793] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.674840] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:559:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.674909] (kruisee_lidar) StderrLine: {'line': b'  559 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.674957] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.675003] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:559:78:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.675051] (kruisee_lidar) StderrLine: {'line': b'  559 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.675184] (kruisee_lidar) StderrLine: {'line': b'      |                                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.675232] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:560:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.675278] (kruisee_lidar) StderrLine: {'line': b'  560 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoROSMessageCallback>)\n'}
[0.675326] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.675373] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.675416] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:560:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.675471] (kruisee_lidar) StderrLine: {'line': b'  560 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoROSMessageCallback>)\n'}
[0.675523] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.675561] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:560:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.675602] (kruisee_lidar) StderrLine: {'line': b'  560 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.675641] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.675681] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:560:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.675720] (kruisee_lidar) StderrLine: {'line': b'  560 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.675759] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.675800] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:566:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.675895] (kruisee_lidar) StderrLine: {'line': b'  566 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageCallback>||\n'}
[0.675983] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.676029] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.676073] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:566:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.676124] (kruisee_lidar) StderrLine: {'line': b'  566 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageCallback>||\n'}
[0.676260] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.676324] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:566:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.676385] (kruisee_lidar) StderrLine: {'line': b'  566 |           std::is_same_v<T, ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.676444] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.676500] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:566:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.676561] (kruisee_lidar) StderrLine: {'line': b'  566 |           std::is_same_v<T, ConstRefSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.676614] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.676737] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:567:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.676804] (kruisee_lidar) StderrLine: {'line': b'  567 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.676852] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.676890] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.676926] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:567:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.676965] (kruisee_lidar) StderrLine: {'line': b'  567 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.677002] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.677038] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:567:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.677076] (kruisee_lidar) StderrLine: {'line': b'  567 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.677112] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.677149] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:567:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.677187] (kruisee_lidar) StderrLine: {'line': b'  567 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.677224] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.677261] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:568:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.677299] (kruisee_lidar) StderrLine: {'line': b'  568 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageCallback>||\n'}
[0.677335] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.677372] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.677410] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:568:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.677450] (kruisee_lidar) StderrLine: {'line': b'  568 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageCallback>||\n'}
[0.677487] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.677525] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:568:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.677562] (kruisee_lidar) StderrLine: {'line': b'  568 |           std::is_same_v<T, UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.677599] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.677637] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:568:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.677675] (kruisee_lidar) StderrLine: {'line': b'  568 |           std::is_same_v<T, UniquePtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.677713] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.677751] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:569:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.677789] (kruisee_lidar) StderrLine: {'line': b'  569 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.677827] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.677864] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.677901] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:569:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.677938] (kruisee_lidar) StderrLine: {'line': b'  569 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.677975] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.678012] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:569:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.678050] (kruisee_lidar) StderrLine: {'line': b'  569 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.678088] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.678126] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:569:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.678166] (kruisee_lidar) StderrLine: {'line': b'  569 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.678204] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.678309] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:570:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.678350] (kruisee_lidar) StderrLine: {'line': b'  570 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageCallback>||\n'}
[0.678386] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.678422] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.678458] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:570:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.678493] (kruisee_lidar) StderrLine: {'line': b'  570 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageCallback>||\n'}
[0.678529] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.678564] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:570:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.678599] (kruisee_lidar) StderrLine: {'line': b'  570 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.678639] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.678675] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:570:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.678711] (kruisee_lidar) StderrLine: {'line': b'  570 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.678747] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.678783] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:571:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.678819] (kruisee_lidar) StderrLine: {'line': b'  571 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.678857] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.678942] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.678981] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:571:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.679020] (kruisee_lidar) StderrLine: {'line': b'  571 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.679057] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.679094] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:571:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.679178] (kruisee_lidar) StderrLine: {'line': b'  571 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.679214] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.679249] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:571:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.679284] (kruisee_lidar) StderrLine: {'line': b'  571 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.679319] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.679353] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:572:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.679388] (kruisee_lidar) StderrLine: {'line': b'  572 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.679447] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.679542] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.679595] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:572:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.679648] (kruisee_lidar) StderrLine: {'line': b'  572 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.679701] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.679752] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:572:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.679804] (kruisee_lidar) StderrLine: {'line': b'  572 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.679863] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.679919] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:572:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.680089] (kruisee_lidar) StderrLine: {'line': b'  572 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.680282] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.680359] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:573:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.680437] (kruisee_lidar) StderrLine: {'line': b'  573 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.680539] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.680601] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.680655] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:573:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.680710] (kruisee_lidar) StderrLine: {'line': b'  573 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.680764] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.680817] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:573:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.680873] (kruisee_lidar) StderrLine: {'line': b'  573 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.680930] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.681047] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:573:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.681113] (kruisee_lidar) StderrLine: {'line': b'  573 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.681177] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.681237] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:574:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.681300] (kruisee_lidar) StderrLine: {'line': b'  574 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageCallback>||\n'}
[0.681364] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.681491] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.681569] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:574:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.681639] (kruisee_lidar) StderrLine: {'line': b'  574 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageCallback>||\n'}
[0.681709] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.681771] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:574:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.681832] (kruisee_lidar) StderrLine: {'line': b'  574 |           std::is_same_v<T, SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.681897] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.682005] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:574:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.682071] (kruisee_lidar) StderrLine: {'line': b'  574 |           std::is_same_v<T, SharedPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.682125] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.682178] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:575:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.682240] (kruisee_lidar) StderrLine: {'line': b'  575 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.682297] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.682351] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.682464] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:575:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.682562] (kruisee_lidar) StderrLine: {'line': b'  575 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.682628] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.682688] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:575:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.682759] (kruisee_lidar) StderrLine: {'line': b'  575 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.682828] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.682953] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:575:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.683019] (kruisee_lidar) StderrLine: {'line': b'  575 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.683076] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.683132] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.683189] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:604:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.683246] (kruisee_lidar) StderrLine: {'line': b'  604 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.683309] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.683448] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:604:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.683509] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In lambda function:\n'}
[0.683567] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:609:28:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.683624] (kruisee_lidar) StderrLine: {'line': b'  609 |         if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageCallback>) {\n'}
[0.683681] (kruisee_lidar) StderrLine: {'line': b'      |                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.683737] (kruisee_lidar) StderrLine: {'line': b'      |                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.683795] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:609:39:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.683891] (kruisee_lidar) StderrLine: {'line': b'  609 |         if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageCallback>) {\n'}
[0.684001] (kruisee_lidar) StderrLine: {'line': b'      |                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.684068] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:609:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.684133] (kruisee_lidar) StderrLine: {'line': b'  609 |         if constexpr (std::is_same_v<T, ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.684195] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.684249] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:609:75:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.684349] (kruisee_lidar) StderrLine: {'line': b'  609 |         if constexpr (std::is_same_v<T, ConstRefSerializedMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.684456] (kruisee_lidar) StderrLine: {'line': b'      |                                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.684514] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:611:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.684579] (kruisee_lidar) StderrLine: {'line': b'  611 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageWithInfoCallback>) {\n'}
[0.684638] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.684695] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.684799] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:611:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.684861] (kruisee_lidar) StderrLine: {'line': b'  611 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageWithInfoCallback>) {\n'}
[0.685004] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.685064] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:611:89:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.685124] (kruisee_lidar) StderrLine: {'line': b'  611 |         } else if constexpr (std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.685232] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.685302] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:611:90:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.685363] (kruisee_lidar) StderrLine: {'line': b'  611 |         } else if constexpr (std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.685470] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.685526] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:613:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.685583] (kruisee_lidar) StderrLine: {'line': b'  613 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageCallback>) {\n'}
[0.685640] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.685748] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.685805] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:613:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.685902] (kruisee_lidar) StderrLine: {'line': b'  613 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageCallback>) {\n'}
[0.685964] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.686020] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:613:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.686078] (kruisee_lidar) StderrLine: {'line': b'  613 |         } else if constexpr (std::is_same_v<T, UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.686178] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.686234] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:613:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.686295] (kruisee_lidar) StderrLine: {'line': b'  613 |         } else if constexpr (std::is_same_v<T, UniquePtrSerializedMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.686358] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.686470] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[0.686526] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[0.686629] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[0.686686] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.686740] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.686794] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.686855] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.686923] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.687199] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.687247] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.687284] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:11\x1b[m\x1b[K,\n'}
[0.687321] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:9\x1b[m\x1b[K:\n'}
[0.687357] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K At global scope:\n'}
[0.687412] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:171:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvariant\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.687466] (kruisee_lidar) StderrLine: {'line': b'  171 |   using variant_type = std::\x1b[01;31m\x1b[Kvariant\x1b[m\x1b[K<\n'}
[0.687606] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[0.687651] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:171:24:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::variant\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.687691] (kruisee_lidar) StderrLine: {'line': b'  171 |   using variant_type = \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::variant<\n'}
[0.687730] (kruisee_lidar) StderrLine: {'line': b'      |                        \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.687766] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:201:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvariant\x1b[m\x1b[K\xe2\x80\x99 in namespace \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99 does not name a template type\n'}
[0.687806] (kruisee_lidar) StderrLine: {'line': b'  201 |   using variant_type = std::\x1b[01;31m\x1b[Kvariant\x1b[m\x1b[K<\n'}
[0.687851] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[0.687895] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:201:24:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::variant\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.687939] (kruisee_lidar) StderrLine: {'line': b'  201 |   using variant_type = \x1b[01;36m\x1b[Kstd\x1b[m\x1b[K::variant<\n'}
[0.688026] (kruisee_lidar) StderrLine: {'line': b'      |                        \x1b[01;36m\x1b[K^~~\x1b[m\x1b[K\n'}
[0.688115] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:615:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.688157] (kruisee_lidar) StderrLine: {'line': b'  615 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageWithInfoCallback>) {\n'}
[0.688197] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.688238] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.688275] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:615:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.688315] (kruisee_lidar) StderrLine: {'line': b'  615 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageWithInfoCallback>) {\n'}
[0.688371] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.688414] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:615:90:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.688501] (kruisee_lidar) StderrLine: {'line': b'  615 |         } else if constexpr (std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.688540] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.688575] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:615:91:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.688661] (kruisee_lidar) StderrLine: {'line': b'  615 |         } else if constexpr (std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.688701] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.688738] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:620:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.688777] (kruisee_lidar) StderrLine: {'line': b'  620 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageCallback>||\n'}
[0.688820] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.688857] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.688952] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:620:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.688992] (kruisee_lidar) StderrLine: {'line': b'  620 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageCallback>||\n'}
[0.689029] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.689071] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:620:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.689107] (kruisee_lidar) StderrLine: {'line': b'  620 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.689143] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.689229] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:620:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.689267] (kruisee_lidar) StderrLine: {'line': b'  620 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.689303] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.689344] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:621:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.689437] (kruisee_lidar) StderrLine: {'line': b'  621 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.689479] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.689514] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.689549] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:621:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.689587] (kruisee_lidar) StderrLine: {'line': b'  621 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.689624] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.689664] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:621:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.689701] (kruisee_lidar) StderrLine: {'line': b'  621 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.689783] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.689872] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:621:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.689912] (kruisee_lidar) StderrLine: {'line': b'  621 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.689950] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.689985] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:622:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.690023] (kruisee_lidar) StderrLine: {'line': b'  622 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageCallback>)\n'}
[0.690060] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.690097] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.690134] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:622:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.690171] (kruisee_lidar) StderrLine: {'line': b'  622 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageCallback>)\n'}
[0.690206] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.690241] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:622:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.690371] (kruisee_lidar) StderrLine: {'line': b'  622 |           std::is_same_v<T, SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.690415] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.690457] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:622:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.690494] (kruisee_lidar) StderrLine: {'line': b'  622 |           std::is_same_v<T, SharedPtrSerializedMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.690537] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.690585] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:626:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.690631] (kruisee_lidar) StderrLine: {'line': b'  626 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.690676] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.690719] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.690763] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:626:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.690936] (kruisee_lidar) StderrLine: {'line': b'  626 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.691009] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.691065] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:626:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.691124] (kruisee_lidar) StderrLine: {'line': b'  626 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.691176] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.691287] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:626:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.691350] (kruisee_lidar) StderrLine: {'line': b'  626 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.691416] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.691524] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch(std::shared_ptr<typename rclcpp::TypeAdapter<MessageT>::ros_message_type>, const rclcpp::MessageInfo&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.691584] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:504:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.691643] (kruisee_lidar) StderrLine: {'line': b'  504 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.691740] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.691808] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:504:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.691874] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:627:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.691937] (kruisee_lidar) StderrLine: {'line': b'  627 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.692038] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.692099] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.692137] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:627:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.692209] (kruisee_lidar) StderrLine: {'line': b'  627 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.692250] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.692287] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:627:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.692324] (kruisee_lidar) StderrLine: {'line': b'  627 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.692360] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.692397] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:627:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.692432] (kruisee_lidar) StderrLine: {'line': b'  627 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.692467] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.692507] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:628:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.692595] (kruisee_lidar) StderrLine: {'line': b'  628 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.692640] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.692683] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.692752] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In lambda function:\n'}
[0.692824] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:510:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.692888] (kruisee_lidar) StderrLine: {'line': b'  510 |         if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefCallback>) {\n'}
[0.692932] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.692974] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.693017] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:628:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.693061] (kruisee_lidar) StderrLine: {'line': b'  628 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.693151] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.693204] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:510:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.693268] (kruisee_lidar) StderrLine: {'line': b'  510 |         if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefCallback>) {\n'}
[0.693309] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.693350] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:628:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.693388] (kruisee_lidar) StderrLine: {'line': b'  628 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.693424] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.693466] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:628:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.693586] (kruisee_lidar) StderrLine: {'line': b'  628 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.693625] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.693667] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:510:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.693764] (kruisee_lidar) StderrLine: {'line': b'  510 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.693824] (kruisee_lidar) StderrLine: {'line': b'      |                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.693881] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:510:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.693941] (kruisee_lidar) StderrLine: {'line': b'  510 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.693996] (kruisee_lidar) StderrLine: {'line': b'      |                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.694095] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:636:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.694185] (kruisee_lidar) StderrLine: {'line': b'  636 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefCallback>||\n'}
[0.694228] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.694264] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.694300] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:636:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.694338] (kruisee_lidar) StderrLine: {'line': b'  636 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefCallback>||\n'}
[0.694374] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.694413] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:636:45:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.694472] (kruisee_lidar) StderrLine: {'line': b'  636 |           std::is_same_v<T, ConstRefCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.694526] (kruisee_lidar) StderrLine: {'line': b'      |                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.694688] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:636:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.694753] (kruisee_lidar) StderrLine: {'line': b'  636 |           std::is_same_v<T, ConstRefCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.694793] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.694829] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:518:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.694877] (kruisee_lidar) StderrLine: {'line': b'  518 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.694915] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.694950] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.694985] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:518:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.695020] (kruisee_lidar) StderrLine: {'line': b'  518 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.695055] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.695091] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:518:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.695196] (kruisee_lidar) StderrLine: {'line': b'  518 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT\n'}
[0.695233] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.695278] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:518:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.695316] (kruisee_lidar) StderrLine: {'line': b'  518 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT\n'}
[0.695353] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.695396] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:637:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.695440] (kruisee_lidar) StderrLine: {'line': b'  637 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefROSMessageCallback>||\n'}
[0.695478] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.695515] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.695552] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:637:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.695588] (kruisee_lidar) StderrLine: {'line': b'  637 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefROSMessageCallback>||\n'}
[0.695625] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.695660] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:637:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.695696] (kruisee_lidar) StderrLine: {'line': b'  637 |           std::is_same_v<T, ConstRefROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.695760] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.695867] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:637:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.695907] (kruisee_lidar) StderrLine: {'line': b'  637 |           std::is_same_v<T, ConstRefROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.695942] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.695979] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:521:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.696017] (kruisee_lidar) StderrLine: {'line': b'  521 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrCallback>) {\n'}
[0.696055] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.696090] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.696126] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:521:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.696162] (kruisee_lidar) StderrLine: {'line': b'  521 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrCallback>) {\n'}
[0.696197] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.696274] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:521:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.696311] (kruisee_lidar) StderrLine: {'line': b'  521 |         } else if constexpr (is_ta && std::is_same_v<T, UniquePtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.696348] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.696384] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:521:75:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.696467] (kruisee_lidar) StderrLine: {'line': b'  521 |         } else if constexpr (is_ta && std::is_same_v<T, UniquePtrCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.696502] (kruisee_lidar) StderrLine: {'line': b'      |                                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.696538] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:638:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.696574] (kruisee_lidar) StderrLine: {'line': b'  638 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoCallback>||\n'}
[0.696609] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.696646] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.696681] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:638:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.696761] (kruisee_lidar) StderrLine: {'line': b'  638 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoCallback>||\n'}
[0.696799] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.696835] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:638:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.696872] (kruisee_lidar) StderrLine: {'line': b'  638 |           std::is_same_v<T, ConstRefWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.696908] (kruisee_lidar) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.696945] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:638:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.696981] (kruisee_lidar) StderrLine: {'line': b'  638 |           std::is_same_v<T, ConstRefWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.697070] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.697109] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:523:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.697147] (kruisee_lidar) StderrLine: {'line': b'  523 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoCallback>) {\n'}
[0.697225] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.697264] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.697304] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:523:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.697343] (kruisee_lidar) StderrLine: {'line': b'  523 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoCallback>) {\n'}
[0.697380] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.697417] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:523:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.697454] (kruisee_lidar) StderrLine: {'line': b'  523 |         } else if constexpr (is_ta && std::is_same_v<T, UniquePtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.697489] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.697524] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:523:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.697608] (kruisee_lidar) StderrLine: {'line': b'  523 |         } else if constexpr (is_ta && std::is_same_v<T, UniquePtrWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.697683] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.697719] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:639:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.697756] (kruisee_lidar) StderrLine: {'line': b'  639 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoROSMessageCallback>||\n'}
[0.697795] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.697879] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.697955] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:639:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.697992] (kruisee_lidar) StderrLine: {'line': b'  639 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoROSMessageCallback>||\n'}
[0.698036] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.698198] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:639:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.698235] (kruisee_lidar) StderrLine: {'line': b'  639 |           std::is_same_v<T, ConstRefWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.698271] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.698305] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:639:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.698344] (kruisee_lidar) StderrLine: {'line': b'  639 |           std::is_same_v<T, ConstRefWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.698379] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.698418] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:527:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.698457] (kruisee_lidar) StderrLine: {'line': b'  527 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrCallback>||\n'}
[0.698492] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.698552] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.698648] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:527:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.698685] (kruisee_lidar) StderrLine: {'line': b'  527 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrCallback>||\n'}
[0.698721] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.698756] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:527:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.698791] (kruisee_lidar) StderrLine: {'line': b'  527 |             std::is_same_v<T, SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.698827] (kruisee_lidar) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.698872] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:527:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.698915] (kruisee_lidar) StderrLine: {'line': b'  527 |             std::is_same_v<T, SharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.698950] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.698985] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:640:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.699021] (kruisee_lidar) StderrLine: {'line': b'  640 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrCallback>||\n'}
[0.699056] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.699175] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.699211] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:640:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.699248] (kruisee_lidar) StderrLine: {'line': b'  640 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrCallback>||\n'}
[0.699286] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.699320] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:640:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.699356] (kruisee_lidar) StderrLine: {'line': b'  640 |           std::is_same_v<T, UniquePtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.699391] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.699427] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:640:47:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.699462] (kruisee_lidar) StderrLine: {'line': b'  640 |           std::is_same_v<T, UniquePtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.699497] (kruisee_lidar) StderrLine: {'line': b'      |                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.699531] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:528:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.699568] (kruisee_lidar) StderrLine: {'line': b'  528 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrCallback>||\n'}
[0.699604] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.699641] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.699676] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:528:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.699712] (kruisee_lidar) StderrLine: {'line': b'  528 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrCallback>||\n'}
[0.699795] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.699831] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:528:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.699868] (kruisee_lidar) StderrLine: {'line': b'  528 |             std::is_same_v<T, ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.699903] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.699938] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:528:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.699978] (kruisee_lidar) StderrLine: {'line': b'  528 |             std::is_same_v<T, ConstRefSharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.700012] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.700048] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:641:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.700088] (kruisee_lidar) StderrLine: {'line': b'  641 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrROSMessageCallback>||\n'}
[0.700124] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.700160] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.700195] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:641:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.700232] (kruisee_lidar) StderrLine: {'line': b'  641 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrROSMessageCallback>||\n'}
[0.700269] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.700349] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:641:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.700386] (kruisee_lidar) StderrLine: {'line': b'  641 |           std::is_same_v<T, UniquePtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.700423] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.700458] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:641:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.700494] (kruisee_lidar) StderrLine: {'line': b'  641 |           std::is_same_v<T, UniquePtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.700529] (-) TimerEvent: {}
[0.700620] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.700672] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:529:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.700711] (kruisee_lidar) StderrLine: {'line': b'  529 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrCallback>\n'}
[0.700750] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.700789] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.700842] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:529:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.701037] (kruisee_lidar) StderrLine: {'line': b'  529 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrCallback>\n'}
[0.701119] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.701179] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:529:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.701237] (kruisee_lidar) StderrLine: {'line': b'  529 |             std::is_same_v<T, SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.701329] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.701399] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:530:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.701560] (kruisee_lidar) StderrLine: {'line': b'  530 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.701622] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.701682] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:642:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.701742] (kruisee_lidar) StderrLine: {'line': b'  642 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoCallback>||\n'}
[0.701803] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.701860] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.701919] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:642:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.701980] (kruisee_lidar) StderrLine: {'line': b'  642 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoCallback>||\n'}
[0.702144] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.702301] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:642:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.702364] (kruisee_lidar) StderrLine: {'line': b'  642 |           std::is_same_v<T, UniquePtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.702417] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.702471] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:642:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.702536] (kruisee_lidar) StderrLine: {'line': b'  642 |           std::is_same_v<T, UniquePtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.702631] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.702735] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:535:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.702804] (kruisee_lidar) StderrLine: {'line': b'  535 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoCallback>||\n'}
[0.702963] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.703011] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.703050] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:535:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.703088] (kruisee_lidar) StderrLine: {'line': b'  535 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoCallback>||\n'}
[0.703219] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.703261] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:535:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.703302] (kruisee_lidar) StderrLine: {'line': b'  535 |             std::is_same_v<T, SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.703340] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.703378] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:535:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.703481] (kruisee_lidar) StderrLine: {'line': b'  535 |             std::is_same_v<T, SharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.703521] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.703560] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:643:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.703601] (kruisee_lidar) StderrLine: {'line': b'  643 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoROSMessageCallback>||\n'}
[0.703639] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.703677] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.703715] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:643:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.703753] (kruisee_lidar) StderrLine: {'line': b'  643 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoROSMessageCallback>||\n'}
[0.703791] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.703828] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:643:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.703866] (kruisee_lidar) StderrLine: {'line': b'  643 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.703907] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.703993] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:643:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.704086] (kruisee_lidar) StderrLine: {'line': b'  643 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.704126] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.704164] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:536:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.704296] (kruisee_lidar) StderrLine: {'line': b'  536 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoCallback>||\n'}
[0.704335] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.704373] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.704411] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:536:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.704449] (kruisee_lidar) StderrLine: {'line': b'  536 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoCallback>||\n'}
[0.704487] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.704529] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:644:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.704571] (kruisee_lidar) StderrLine: {'line': b'  644 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrCallback>||\n'}
[0.704643] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.704686] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.704727] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:536:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.704848] (kruisee_lidar) StderrLine: {'line': b'  536 |             std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.704886] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.704923] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:644:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.704961] (kruisee_lidar) StderrLine: {'line': b'  644 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrCallback>||\n'}
[0.705002] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.705040] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:536:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.705079] (kruisee_lidar) StderrLine: {'line': b'  536 |             std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.705118] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.705157] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:644:51:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.705197] (kruisee_lidar) StderrLine: {'line': b'  644 |           std::is_same_v<T, SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.705346] (kruisee_lidar) StderrLine: {'line': b'      |                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.705387] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:644:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.705424] (kruisee_lidar) StderrLine: {'line': b'  644 |           std::is_same_v<T, SharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.705463] (kruisee_lidar) StderrLine: {'line': b'      |                                                    \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.705501] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:645:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.705540] (kruisee_lidar) StderrLine: {'line': b'  645 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrROSMessageCallback>||\n'}
[0.705579] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.705619] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.705658] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:645:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.705697] (kruisee_lidar) StderrLine: {'line': b'  645 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrROSMessageCallback>||\n'}
[0.705735] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.705772] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:645:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.705809] (kruisee_lidar) StderrLine: {'line': b'  645 |           std::is_same_v<T, SharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.705846] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.705883] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:645:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.705920] (kruisee_lidar) StderrLine: {'line': b'  645 |           std::is_same_v<T, SharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.705957] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.705993] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:537:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.706032] (kruisee_lidar) StderrLine: {'line': b'  537 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoCallback>\n'}
[0.706070] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.706110] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.706181] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:537:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.706219] (kruisee_lidar) StderrLine: {'line': b'  537 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoCallback>\n'}
[0.706256] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.706436] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:537:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.706547] (kruisee_lidar) StderrLine: {'line': b'  537 |             std::is_same_v<T, SharedPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.706584] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.706623] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:538:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.706660] (kruisee_lidar) StderrLine: {'line': b'  538 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.706696] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.706733] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:646:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.706772] (kruisee_lidar) StderrLine: {'line': b'  646 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoCallback>||\n'}
[0.706809] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.706846] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.706922] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:646:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.706963] (kruisee_lidar) StderrLine: {'line': b'  646 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoCallback>||\n'}
[0.707001] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.707038] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:646:59:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.707076] (kruisee_lidar) StderrLine: {'line': b'  646 |           std::is_same_v<T, SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.707113] (kruisee_lidar) StderrLine: {'line': b'      |                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.707151] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:646:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.707188] (kruisee_lidar) StderrLine: {'line': b'  646 |           std::is_same_v<T, SharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.707224] (kruisee_lidar) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.707336] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:543:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.707376] (kruisee_lidar) StderrLine: {'line': b'  543 |         else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefROSMessageCallback>) {  // NOLINT\n'}
[0.707414] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.707452] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.707648] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:543:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.707713] (kruisee_lidar) StderrLine: {'line': b'  543 |         else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefROSMessageCallback>) {  // NOLINT\n'}
[0.707798] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.707957] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:543:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.708016] (kruisee_lidar) StderrLine: {'line': b'  543 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT\n'}
[0.708073] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.708133] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:543:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.708193] (kruisee_lidar) StderrLine: {'line': b'  543 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT\n'}
[0.708323] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.708436] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:647:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.708509] (kruisee_lidar) StderrLine: {'line': b'  647 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.708605] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.708664] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.708717] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:647:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.708779] (kruisee_lidar) StderrLine: {'line': b'  647 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.708837] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.708963] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:647:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.709031] (kruisee_lidar) StderrLine: {'line': b'  647 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.709092] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.709145] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:647:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.709264] (kruisee_lidar) StderrLine: {'line': b'  647 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.709316] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.709433] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:545:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.709495] (kruisee_lidar) StderrLine: {'line': b'  545 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoROSMessageCallback>) {\n'}
[0.709553] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.709606] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.709659] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:545:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.709779] (kruisee_lidar) StderrLine: {'line': b'  545 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoROSMessageCallback>) {\n'}
[0.709838] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.709894] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:545:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.710021] (kruisee_lidar) StderrLine: {'line': b'  545 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.710083] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.710192] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:545:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.710254] (kruisee_lidar) StderrLine: {'line': b'  545 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.710308] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.710366] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:648:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.710497] (kruisee_lidar) StderrLine: {'line': b'  648 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrCallback>||\n'}
[0.710555] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.710663] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.710726] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:648:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.710780] (kruisee_lidar) StderrLine: {'line': b'  648 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrCallback>||\n'}
[0.710836] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.711044] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:648:59:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.711171] (kruisee_lidar) StderrLine: {'line': b'  648 |           std::is_same_v<T, ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.711224] (kruisee_lidar) StderrLine: {'line': b'      |                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.711262] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:648:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.711301] (kruisee_lidar) StderrLine: {'line': b'  648 |           std::is_same_v<T, ConstRefSharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.711338] (kruisee_lidar) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.711439] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:547:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.711481] (kruisee_lidar) StderrLine: {'line': b'  547 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrROSMessageCallback>) {\n'}
[0.711517] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.711579] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.711618] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:547:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.711655] (kruisee_lidar) StderrLine: {'line': b'  547 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrROSMessageCallback>) {\n'}
[0.711694] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.711731] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:547:75:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.711768] (kruisee_lidar) StderrLine: {'line': b'  547 |         } else if constexpr (std::is_same_v<T, UniquePtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.711850] (kruisee_lidar) StderrLine: {'line': b'      |                                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.711886] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:547:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.711924] (kruisee_lidar) StderrLine: {'line': b'  547 |         } else if constexpr (std::is_same_v<T, UniquePtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.711962] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.712000] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:649:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.712039] (kruisee_lidar) StderrLine: {'line': b'  649 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrROSMessageCallback>||\n'}
[0.712076] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.712114] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.712151] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:649:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.712188] (kruisee_lidar) StderrLine: {'line': b'  649 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrROSMessageCallback>||\n'}
[0.712225] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.712262] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:649:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.712299] (kruisee_lidar) StderrLine: {'line': b'  649 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.712336] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.712372] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:649:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.712408] (kruisee_lidar) StderrLine: {'line': b'  649 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.712471] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.712508] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:650:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.712696] (kruisee_lidar) StderrLine: {'line': b'  650 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoCallback>||\n'}
[0.712733] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.712772] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.712808] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:650:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.712844] (kruisee_lidar) StderrLine: {'line': b'  650 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoCallback>||\n'}
[0.712880] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.712934] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:650:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.712975] (kruisee_lidar) StderrLine: {'line': b'  650 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.713013] (kruisee_lidar) StderrLine: {'line': b'      |                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.713081] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:650:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.713120] (kruisee_lidar) StderrLine: {'line': b'  650 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.713209] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.713247] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:549:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.713284] (kruisee_lidar) StderrLine: {'line': b'  549 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoROSMessageCallback>) {\n'}
[0.713320] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.713354] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.713390] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:549:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.713428] (kruisee_lidar) StderrLine: {'line': b'  549 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoROSMessageCallback>) {\n'}
[0.713465] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.713509] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:549:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.713548] (kruisee_lidar) StderrLine: {'line': b'  549 |         } else if constexpr (std::is_same_v<T, UniquePtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.713585] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.713621] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:549:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.713685] (kruisee_lidar) StderrLine: {'line': b'  549 |         } else if constexpr (std::is_same_v<T, UniquePtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.713722] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.713759] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:651:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.713798] (kruisee_lidar) StderrLine: {'line': b'  651 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.713836] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.713882] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.713919] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:651:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.713957] (kruisee_lidar) StderrLine: {'line': b'  651 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.713995] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.714116] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:651:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.714236] (kruisee_lidar) StderrLine: {'line': b'  651 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.714273] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.714320] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:651:78:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.714375] (kruisee_lidar) StderrLine: {'line': b'  651 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.714505] (kruisee_lidar) StderrLine: {'line': b'      |                                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.714633] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:552:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.714699] (kruisee_lidar) StderrLine: {'line': b'  552 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrROSMessageCallback>||\n'}
[0.714757] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.714809] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.714861] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:552:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.715007] (kruisee_lidar) StderrLine: {'line': b'  552 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrROSMessageCallback>||\n'}
[0.715071] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.715200] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:552:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.715262] (kruisee_lidar) StderrLine: {'line': b'  552 |           std::is_same_v<T, SharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.715317] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.715373] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:552:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.715487] (kruisee_lidar) StderrLine: {'line': b'  552 |           std::is_same_v<T, SharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.715544] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.715668] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:652:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.715728] (kruisee_lidar) StderrLine: {'line': b'  652 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrCallback>||\n'}
[0.715785] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.715838] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.715894] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:652:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.716010] (kruisee_lidar) StderrLine: {'line': b'  652 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrCallback>||\n'}
[0.716065] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.716174] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:652:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.716231] (kruisee_lidar) StderrLine: {'line': b'  652 |           std::is_same_v<T, SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.716284] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.716397] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:652:47:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.716450] (kruisee_lidar) StderrLine: {'line': b'  652 |           std::is_same_v<T, SharedPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.716497] (kruisee_lidar) StderrLine: {'line': b'      |                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.716548] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:553:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.716595] (kruisee_lidar) StderrLine: {'line': b'  553 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrROSMessageCallback>||\n'}
[0.716680] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.716729] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.716828] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:553:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.716918] (kruisee_lidar) StderrLine: {'line': b'  553 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrROSMessageCallback>||\n'}
[0.716962] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.717007] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:553:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.717052] (kruisee_lidar) StderrLine: {'line': b'  553 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.717098] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.717192] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:553:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.717237] (kruisee_lidar) StderrLine: {'line': b'  553 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.717301] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.717378] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:653:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.717424] (kruisee_lidar) StderrLine: {'line': b'  653 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrROSMessageCallback>||\n'}
[0.717469] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.717515] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.717560] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:653:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.717605] (kruisee_lidar) StderrLine: {'line': b'  653 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrROSMessageCallback>||\n'}
[0.717650] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.717714] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:653:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.717804] (kruisee_lidar) StderrLine: {'line': b'  653 |           std::is_same_v<T, SharedPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.717893] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.717939] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:653:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.717985] (kruisee_lidar) StderrLine: {'line': b'  653 |           std::is_same_v<T, SharedPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.718030] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.718111] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:554:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.718161] (kruisee_lidar) StderrLine: {'line': b'  554 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrROSMessageCallback>)\n'}
[0.718224] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.718338] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.718377] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:554:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.718415] (kruisee_lidar) StderrLine: {'line': b'  554 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrROSMessageCallback>)\n'}
[0.718451] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.718486] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:554:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.718532] (kruisee_lidar) StderrLine: {'line': b'  554 |           std::is_same_v<T, SharedPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.718578] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.718653] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:554:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.718733] (kruisee_lidar) StderrLine: {'line': b'  554 |           std::is_same_v<T, SharedPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.718802] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.718915] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:654:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.718990] (kruisee_lidar) StderrLine: {'line': b'  654 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoCallback>||\n'}
[0.719060] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.719108] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.719203] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:654:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.719247] (kruisee_lidar) StderrLine: {'line': b'  654 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoCallback>||\n'}
[0.719288] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.719327] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:654:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.719535] (kruisee_lidar) StderrLine: {'line': b'  654 |           std::is_same_v<T, SharedPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.719617] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.719677] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:654:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.719731] (kruisee_lidar) StderrLine: {'line': b'  654 |           std::is_same_v<T, SharedPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.719826] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.719878] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:558:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.719970] (kruisee_lidar) StderrLine: {'line': b'  558 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.720077] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.720131] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.720180] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:558:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.720234] (kruisee_lidar) StderrLine: {'line': b'  558 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.720335] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.720391] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:558:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.720445] (kruisee_lidar) StderrLine: {'line': b'  558 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.720509] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.720563] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:558:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.720622] (kruisee_lidar) StderrLine: {'line': b'  558 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.720673] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.720718] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:655:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.720761] (kruisee_lidar) StderrLine: {'line': b'  655 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoROSMessageCallback>)\n'}
[0.720800] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.720881] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.720923] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:655:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.720965] (kruisee_lidar) StderrLine: {'line': b'  655 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoROSMessageCallback>)\n'}
[0.721090] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.721131] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:655:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.721171] (kruisee_lidar) StderrLine: {'line': b'  655 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.721308] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.721387] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:655:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.721428] (kruisee_lidar) StderrLine: {'line': b'  655 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.721489] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.721525] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch_intra_process(std::shared_ptr<const typename rclcpp::TypeAdapter<MessageT>::custom_type>, const rclcpp::MessageInfo&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.721564] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:683:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.721601] (kruisee_lidar) StderrLine: {'line': b'  683 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.721638] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.721712] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:683:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.721753] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:559:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.721806] (kruisee_lidar) StderrLine: {'line': b'  559 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.721907] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.721965] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.722018] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:559:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.722073] (kruisee_lidar) StderrLine: {'line': b'  559 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.722130] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.722185] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:559:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.722273] (kruisee_lidar) StderrLine: {'line': b'  559 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.722407] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.722454] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:559:78:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.722493] (kruisee_lidar) StderrLine: {'line': b'  559 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.722532] (kruisee_lidar) StderrLine: {'line': b'      |                                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.722572] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In lambda function:\n'}
[0.722612] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:689:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.722654] (kruisee_lidar) StderrLine: {'line': b'  689 |         if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefCallback>) {\n'}
[0.722695] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.722736] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.722933] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:689:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.723057] (kruisee_lidar) StderrLine: {'line': b'  689 |         if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefCallback>) {\n'}
[0.723125] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.723180] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:689:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.723234] (kruisee_lidar) StderrLine: {'line': b'  689 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.723344] (kruisee_lidar) StderrLine: {'line': b'      |                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.723404] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:689:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.723465] (kruisee_lidar) StderrLine: {'line': b'  689 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.723527] (kruisee_lidar) StderrLine: {'line': b'      |                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.723661] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:560:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.723718] (kruisee_lidar) StderrLine: {'line': b'  560 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoROSMessageCallback>)\n'}
[0.723760] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.723899] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.723956] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:560:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.723998] (kruisee_lidar) StderrLine: {'line': b'  560 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoROSMessageCallback>)\n'}
[0.724038] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.724079] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:560:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.724119] (kruisee_lidar) StderrLine: {'line': b'  560 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.724161] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.724203] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:560:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.724279] (kruisee_lidar) StderrLine: {'line': b'  560 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.724318] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.724356] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:691:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.724443] (kruisee_lidar) StderrLine: {'line': b'  691 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.724483] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.724524] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.724562] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:691:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.724598] (kruisee_lidar) StderrLine: {'line': b'  691 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.724636] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.724673] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:691:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.724709] (kruisee_lidar) StderrLine: {'line': b'  691 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT\n'}
[0.724746] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.724784] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:691:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.724857] (kruisee_lidar) StderrLine: {'line': b'  691 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT\n'}
[0.724898] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.724936] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:566:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.724977] (kruisee_lidar) StderrLine: {'line': b'  566 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageCallback>||\n'}
[0.725015] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.725054] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.725093] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:566:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.725132] (kruisee_lidar) StderrLine: {'line': b'  566 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageCallback>||\n'}
[0.725169] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.725207] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:566:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.725287] (kruisee_lidar) StderrLine: {'line': b'  566 |           std::is_same_v<T, ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.725323] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.725360] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:566:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.725398] (kruisee_lidar) StderrLine: {'line': b'  566 |           std::is_same_v<T, ConstRefSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.725436] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.725472] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:695:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.725512] (kruisee_lidar) StderrLine: {'line': b'  695 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrCallback>||\n'}
[0.725551] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.725590] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.725630] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:695:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.725670] (kruisee_lidar) StderrLine: {'line': b'  695 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrCallback>||\n'}
[0.725709] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.725749] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:695:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.725788] (kruisee_lidar) StderrLine: {'line': b'  695 |             std::is_same_v<T, UniquePtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.725825] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.725863] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:695:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.725957] (kruisee_lidar) StderrLine: {'line': b'  695 |             std::is_same_v<T, UniquePtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.725997] (kruisee_lidar) StderrLine: {'line': b'      |                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.726169] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:567:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.726208] (kruisee_lidar) StderrLine: {'line': b'  567 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.726245] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.726286] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.726323] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:567:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.726360] (kruisee_lidar) StderrLine: {'line': b'  567 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.726397] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.726465] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:567:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.726506] (kruisee_lidar) StderrLine: {'line': b'  567 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.726544] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.726581] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:567:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.726618] (kruisee_lidar) StderrLine: {'line': b'  567 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.726655] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.726692] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:696:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.726730] (kruisee_lidar) StderrLine: {'line': b'  696 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrCallback>\n'}
[0.726768] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.726805] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.726843] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:696:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.726956] (kruisee_lidar) StderrLine: {'line': b'  696 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrCallback>\n'}
[0.726996] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.727034] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:568:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.727077] (kruisee_lidar) StderrLine: {'line': b'  568 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageCallback>||\n'}
[0.727114] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.727152] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.727189] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:696:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.727254] (kruisee_lidar) StderrLine: {'line': b'  696 |             std::is_same_v<T, SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.727292] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.727331] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:568:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.727371] (kruisee_lidar) StderrLine: {'line': b'  568 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageCallback>||\n'}
[0.727455] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.727494] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:697:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.727532] (kruisee_lidar) StderrLine: {'line': b'  697 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.727571] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.727624] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:568:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.727750] (kruisee_lidar) StderrLine: {'line': b'  568 |           std::is_same_v<T, UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.727790] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.727824] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:568:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.727860] (kruisee_lidar) StderrLine: {'line': b'  568 |           std::is_same_v<T, UniquePtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.727895] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.727930] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:702:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.727965] (kruisee_lidar) StderrLine: {'line': b'  702 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoCallback>||\n'}
[0.728002] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.728037] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.728130] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:702:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.728167] (kruisee_lidar) StderrLine: {'line': b'  702 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoCallback>||\n'}
[0.728202] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.728240] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:569:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.728275] (kruisee_lidar) StderrLine: {'line': b'  569 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.728312] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.728347] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.728383] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:702:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.728427] (kruisee_lidar) StderrLine: {'line': b'  702 |             std::is_same_v<T, UniquePtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.728518] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.728574] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:702:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.728699] (kruisee_lidar) StderrLine: {'line': b'  702 |             std::is_same_v<T, UniquePtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.728754] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.728816] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:569:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.728874] (kruisee_lidar) StderrLine: {'line': b'  569 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.728928] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.728986] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:569:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.729041] (kruisee_lidar) StderrLine: {'line': b'  569 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.729096] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.729149] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:569:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.729259] (kruisee_lidar) StderrLine: {'line': b'  569 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.729313] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.729392] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:703:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.729456] (kruisee_lidar) StderrLine: {'line': b'  703 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoCallback>\n'}
[0.729509] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.729560] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.729616] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:703:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.729670] (kruisee_lidar) StderrLine: {'line': b'  703 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoCallback>\n'}
[0.729724] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.729833] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:703:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.729892] (kruisee_lidar) StderrLine: {'line': b'  703 |             std::is_same_v<T, SharedPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.729949] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.730007] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:704:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.730066] (kruisee_lidar) StderrLine: {'line': b'  704 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.730118] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.730172] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:570:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.730226] (kruisee_lidar) StderrLine: {'line': b'  570 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageCallback>||\n'}
[0.730277] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.730379] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.730416] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:570:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.730453] (kruisee_lidar) StderrLine: {'line': b'  570 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageCallback>||\n'}
[0.730489] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.730524] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:570:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.730560] (kruisee_lidar) StderrLine: {'line': b'  570 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.730594] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.730628] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:570:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.730667] (kruisee_lidar) StderrLine: {'line': b'  570 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.730701] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.730776] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:709:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.730813] (kruisee_lidar) StderrLine: {'line': b'  709 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrCallback>||\n'}
[0.730848] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.730897] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.730932] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:709:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.730967] (kruisee_lidar) StderrLine: {'line': b'  709 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrCallback>||\n'}
[0.731002] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.731036] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:709:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.731072] (kruisee_lidar) StderrLine: {'line': b'  709 |             std::is_same_v<T, SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.731108] (kruisee_lidar) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.731143] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:709:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.731193] (kruisee_lidar) StderrLine: {'line': b'  709 |             std::is_same_v<T, SharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.731267] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.731302] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:571:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.731338] (kruisee_lidar) StderrLine: {'line': b'  571 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.731373] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.731408] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.731443] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:571:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.731481] (kruisee_lidar) StderrLine: {'line': b'  571 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.731520] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.731555] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:571:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.731593] (kruisee_lidar) StderrLine: {'line': b'  571 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.731628] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.731669] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:571:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.731738] (kruisee_lidar) StderrLine: {'line': b'  571 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.731774] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.731808] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:710:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.731845] (kruisee_lidar) StderrLine: {'line': b'  710 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrCallback>\n'}
[0.731880] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.731914] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.731949] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:710:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.731985] (kruisee_lidar) StderrLine: {'line': b'  710 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrCallback>\n'}
[0.732019] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.732054] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:710:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.732091] (kruisee_lidar) StderrLine: {'line': b'  710 |             std::is_same_v<T, ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.732181] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.732216] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:711:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.732255] (kruisee_lidar) StderrLine: {'line': b'  711 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.732301] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.732351] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:572:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.732395] (kruisee_lidar) StderrLine: {'line': b'  572 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.732431] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.732465] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.732500] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:572:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.732536] (kruisee_lidar) StderrLine: {'line': b'  572 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.732609] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.732645] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:572:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.732681] (kruisee_lidar) StderrLine: {'line': b'  572 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.732716] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.732752] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:572:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.732786] (kruisee_lidar) StderrLine: {'line': b'  572 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.732821] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.732855] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:716:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.732892] (kruisee_lidar) StderrLine: {'line': b'  716 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoCallback>||\n'}
[0.732927] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.732964] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.732999] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:716:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.733084] (kruisee_lidar) StderrLine: {'line': b'  716 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoCallback>||\n'}
[0.733148] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.733184] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:716:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.733221] (kruisee_lidar) StderrLine: {'line': b'  716 |             std::is_same_v<T, SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.733257] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.733293] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:716:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.733330] (kruisee_lidar) StderrLine: {'line': b'  716 |             std::is_same_v<T, SharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.733366] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.733401] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:573:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.733437] (kruisee_lidar) StderrLine: {'line': b'  573 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.733471] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.733545] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.733580] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:573:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.733616] (kruisee_lidar) StderrLine: {'line': b'  573 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.733650] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.733685] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:573:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.733721] (kruisee_lidar) StderrLine: {'line': b'  573 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.733757] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.733793] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:573:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.733829] (kruisee_lidar) StderrLine: {'line': b'  573 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.733866] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.733901] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:717:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.733949] (kruisee_lidar) StderrLine: {'line': b'  717 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoCallback>\n'}
[0.734030] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.734069] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.734105] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:717:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.734144] (kruisee_lidar) StderrLine: {'line': b'  717 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoCallback>\n'}
[0.734229] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.734320] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:717:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.734373] (kruisee_lidar) StderrLine: {'line': b'  717 |             std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.734425] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.734473] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:718:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.734510] (kruisee_lidar) StderrLine: {'line': b'  718 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.734555] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.734606] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:723:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.734648] (kruisee_lidar) StderrLine: {'line': b'  723 |         else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.734690] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.734725] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.734761] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:574:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.734799] (kruisee_lidar) StderrLine: {'line': b'  574 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageCallback>||\n'}
[0.734834] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.734882] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.734923] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:723:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.734964] (kruisee_lidar) StderrLine: {'line': b'  723 |         else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.735001] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.735077] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:723:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.735116] (kruisee_lidar) StderrLine: {'line': b'  723 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT[readability/braces]\n'}
[0.735154] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.735228] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:574:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.735274] (kruisee_lidar) StderrLine: {'line': b'  574 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageCallback>||\n'}
[0.735323] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.735367] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:723:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.735419] (kruisee_lidar) StderrLine: {'line': b'  723 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT[readability/braces]\n'}
[0.735568] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.735627] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:574:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.735683] (kruisee_lidar) StderrLine: {'line': b'  574 |           std::is_same_v<T, SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.735742] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.735801] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:574:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.735856] (kruisee_lidar) StderrLine: {'line': b'  574 |           std::is_same_v<T, SharedPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.735913] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.735970] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:575:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.736063] (kruisee_lidar) StderrLine: {'line': b'  575 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.736143] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.736197] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.736250] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:575:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.736308] (kruisee_lidar) StderrLine: {'line': b'  575 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.736358] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.736411] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:575:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.736464] (kruisee_lidar) StderrLine: {'line': b'  575 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.736521] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.736580] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:575:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.736717] (kruisee_lidar) StderrLine: {'line': b'  575 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.736786] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.736839] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:730:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.736899] (kruisee_lidar) StderrLine: {'line': b'  730 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.736960] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.737017] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.737071] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:730:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.737122] (kruisee_lidar) StderrLine: {'line': b'  730 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.737176] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.737227] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:730:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.737328] (kruisee_lidar) StderrLine: {'line': b'  730 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT[readability/braces]\n'}
[0.737370] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.737409] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:730:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.737452] (kruisee_lidar) StderrLine: {'line': b'  730 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT[readability/braces]\n'}
[0.737489] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.737525] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:738:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.737562] (kruisee_lidar) StderrLine: {'line': b'  738 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrROSMessageCallback>||\n'}
[0.737597] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.737633] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.737669] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:738:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.737706] (kruisee_lidar) StderrLine: {'line': b'  738 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrROSMessageCallback>||\n'}
[0.737793] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.737830] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:738:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.737869] (kruisee_lidar) StderrLine: {'line': b'  738 |           std::is_same_v<T, UniquePtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.737905] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.737939] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:738:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.737974] (kruisee_lidar) StderrLine: {'line': b'  738 |           std::is_same_v<T, UniquePtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.738008] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.738043] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:739:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.738078] (kruisee_lidar) StderrLine: {'line': b'  739 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrROSMessageCallback>)\n'}
[0.738113] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.738147] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.738180] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:739:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.738253] (kruisee_lidar) StderrLine: {'line': b'  739 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrROSMessageCallback>)\n'}
[0.738291] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.738328] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:739:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.738363] (kruisee_lidar) StderrLine: {'line': b'  739 |           std::is_same_v<T, SharedPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.738398] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.738433] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:739:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.738467] (kruisee_lidar) StderrLine: {'line': b'  739 |           std::is_same_v<T, SharedPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.738501] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.738536] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:747:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.738571] (kruisee_lidar) StderrLine: {'line': b'  747 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoROSMessageCallback>||\n'}
[0.738606] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.738640] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.738707] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:747:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.738742] (kruisee_lidar) StderrLine: {'line': b'  747 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoROSMessageCallback>||\n'}
[0.738777] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.738811] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:747:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.738847] (kruisee_lidar) StderrLine: {'line': b'  747 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.738894] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.738929] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:747:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.738963] (kruisee_lidar) StderrLine: {'line': b'  747 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.738997] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.739029] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.739068] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:604:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.739103] (kruisee_lidar) StderrLine: {'line': b'  604 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.739175] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.739211] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:604:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.739247] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:748:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.739282] (kruisee_lidar) StderrLine: {'line': b'  748 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoROSMessageCallback>)\n'}
[0.739317] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.739350] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.739385] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:748:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.739420] (kruisee_lidar) StderrLine: {'line': b'  748 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoROSMessageCallback>)\n'}
[0.739454] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.739488] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:748:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.739523] (kruisee_lidar) StderrLine: {'line': b'  748 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.739559] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.739595] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:748:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.739665] (kruisee_lidar) StderrLine: {'line': b'  748 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.739701] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.739736] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:756:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.739771] (kruisee_lidar) StderrLine: {'line': b'  756 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrROSMessageCallback>||\n'}
[0.739805] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.739843] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.739877] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:756:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.739912] (kruisee_lidar) StderrLine: {'line': b'  756 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrROSMessageCallback>||\n'}
[0.739946] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.739980] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:756:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.740015] (kruisee_lidar) StderrLine: {'line': b'  756 |           std::is_same_v<T, SharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.740052] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.740126] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:756:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.740161] (kruisee_lidar) StderrLine: {'line': b'  756 |           std::is_same_v<T, SharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.740196] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.740231] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In lambda function:\n'}
[0.740266] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:609:28:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.740301] (kruisee_lidar) StderrLine: {'line': b'  609 |         if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageCallback>) {\n'}
[0.740336] (kruisee_lidar) StderrLine: {'line': b'      |                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.740373] (kruisee_lidar) StderrLine: {'line': b'      |                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.740406] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:609:39:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.740442] (kruisee_lidar) StderrLine: {'line': b'  609 |         if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageCallback>) {\n'}
[0.740476] (kruisee_lidar) StderrLine: {'line': b'      |                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.740509] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:609:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.740583] (kruisee_lidar) StderrLine: {'line': b'  609 |         if constexpr (std::is_same_v<T, ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.740618] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.740653] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:609:75:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.740689] (kruisee_lidar) StderrLine: {'line': b'  609 |         if constexpr (std::is_same_v<T, ConstRefSerializedMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.740723] (kruisee_lidar) StderrLine: {'line': b'      |                                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.740757] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:757:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.740792] (kruisee_lidar) StderrLine: {'line': b'  757 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrROSMessageCallback>)\n'}
[0.740826] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.740862] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.740896] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:757:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.740934] (kruisee_lidar) StderrLine: {'line': b'  757 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrROSMessageCallback>)\n'}
[0.740969] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.741004] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:757:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.741074] (kruisee_lidar) StderrLine: {'line': b'  757 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.741109] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.741143] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:757:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.741178] (kruisee_lidar) StderrLine: {'line': b'  757 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.741212] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.741247] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:611:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.741283] (kruisee_lidar) StderrLine: {'line': b'  611 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageWithInfoCallback>) {\n'}
[0.741318] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.741352] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.741387] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:611:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.741424] (kruisee_lidar) StderrLine: {'line': b'  611 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageWithInfoCallback>) {\n'}
[0.741459] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.741527] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:611:89:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.741563] (kruisee_lidar) StderrLine: {'line': b'  611 |         } else if constexpr (std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.741600] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.741634] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:611:90:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.741669] (kruisee_lidar) StderrLine: {'line': b'  611 |         } else if constexpr (std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.741703] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.741737] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:765:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.741772] (kruisee_lidar) StderrLine: {'line': b'  765 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.741806] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.741840] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.741873] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:765:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.741908] (kruisee_lidar) StderrLine: {'line': b'  765 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.741942] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.741978] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:765:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.742045] (kruisee_lidar) StderrLine: {'line': b'  765 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.742080] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.742115] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:765:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.742150] (kruisee_lidar) StderrLine: {'line': b'  765 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.742186] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.742221] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:613:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.742258] (kruisee_lidar) StderrLine: {'line': b'  613 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageCallback>) {\n'}
[0.742292] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.742327] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.742360] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:613:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.742394] (kruisee_lidar) StderrLine: {'line': b'  613 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageCallback>) {\n'}
[0.742466] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.742501] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:613:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.742537] (kruisee_lidar) StderrLine: {'line': b'  613 |         } else if constexpr (std::is_same_v<T, UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.742571] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.742605] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:613:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.742640] (kruisee_lidar) StderrLine: {'line': b'  613 |         } else if constexpr (std::is_same_v<T, UniquePtrSerializedMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.742674] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.742707] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:766:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.742744] (kruisee_lidar) StderrLine: {'line': b'  766 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>)\n'}
[0.742778] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.742814] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.742848] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:766:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.742893] (kruisee_lidar) StderrLine: {'line': b'  766 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoROSMessageCallback>)\n'}
[0.742963] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.742998] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:766:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.743046] (kruisee_lidar) StderrLine: {'line': b'  766 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.743086] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.743121] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:766:78:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.743157] (kruisee_lidar) StderrLine: {'line': b'  766 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.743192] (kruisee_lidar) StderrLine: {'line': b'      |                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.743227] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:615:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.743262] (kruisee_lidar) StderrLine: {'line': b'  615 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageWithInfoCallback>) {\n'}
[0.743298] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.743332] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.743371] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:615:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.743409] (kruisee_lidar) StderrLine: {'line': b'  615 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageWithInfoCallback>) {\n'}
[0.743445] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.743483] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:615:90:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.743562] (kruisee_lidar) StderrLine: {'line': b'  615 |         } else if constexpr (std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.743598] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.743672] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:615:91:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.743708] (kruisee_lidar) StderrLine: {'line': b'  615 |         } else if constexpr (std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.743744] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.743779] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:776:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.743814] (kruisee_lidar) StderrLine: {'line': b'  776 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageCallback>||\n'}
[0.743849] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.743885] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.743921] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:776:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.743958] (kruisee_lidar) StderrLine: {'line': b'  776 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageCallback>||\n'}
[0.743994] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.744054] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:776:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.744093] (kruisee_lidar) StderrLine: {'line': b'  776 |           std::is_same_v<T, ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.744129] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.744166] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:776:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.744203] (kruisee_lidar) StderrLine: {'line': b'  776 |           std::is_same_v<T, ConstRefSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.744239] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.744275] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:777:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.744313] (kruisee_lidar) StderrLine: {'line': b'  777 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.744349] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.744385] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.744422] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:777:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.744460] (kruisee_lidar) StderrLine: {'line': b'  777 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.744497] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.744617] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:620:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.744656] (kruisee_lidar) StderrLine: {'line': b'  620 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageCallback>||\n'}
[0.744693] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.744728] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.744764] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:777:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.744800] (kruisee_lidar) StderrLine: {'line': b'  777 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.744835] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.744872] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:620:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.744909] (kruisee_lidar) StderrLine: {'line': b'  620 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageCallback>||\n'}
[0.744947] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.745014] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:777:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.745053] (kruisee_lidar) StderrLine: {'line': b'  777 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.745128] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.745164] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:620:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.745202] (kruisee_lidar) StderrLine: {'line': b'  620 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.745239] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.745276] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:620:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.745312] (kruisee_lidar) StderrLine: {'line': b'  620 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.745351] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.745385] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:778:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.745454] (kruisee_lidar) StderrLine: {'line': b'  778 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageCallback>||\n'}
[0.745492] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.745528] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.745565] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:778:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.745602] (kruisee_lidar) StderrLine: {'line': b'  778 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageCallback>||\n'}
[0.745639] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.745675] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:778:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.745712] (kruisee_lidar) StderrLine: {'line': b'  778 |           std::is_same_v<T, UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.745749] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.745785] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:778:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.745823] (kruisee_lidar) StderrLine: {'line': b'  778 |           std::is_same_v<T, UniquePtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.745861] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.745898] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:621:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.745936] (kruisee_lidar) StderrLine: {'line': b'  621 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.745975] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.746013] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.746050] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:621:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.746089] (kruisee_lidar) StderrLine: {'line': b'  621 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.746127] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.746166] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:621:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.746204] (kruisee_lidar) StderrLine: {'line': b'  621 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.746241] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.746323] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:621:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.746361] (kruisee_lidar) StderrLine: {'line': b'  621 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.746398] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.746438] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:779:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.746477] (kruisee_lidar) StderrLine: {'line': b'  779 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.746583] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.746623] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.746661] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:779:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.746700] (kruisee_lidar) StderrLine: {'line': b'  779 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.746737] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.746775] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:779:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.746872] (kruisee_lidar) StderrLine: {'line': b'  779 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.746913] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.746948] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:779:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.746985] (kruisee_lidar) StderrLine: {'line': b'  779 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.747023] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.747059] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:622:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.747098] (kruisee_lidar) StderrLine: {'line': b'  622 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageCallback>)\n'}
[0.747134] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.747171] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.747237] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:622:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.747276] (kruisee_lidar) StderrLine: {'line': b'  622 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageCallback>)\n'}
[0.747314] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.747352] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:622:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.747390] (kruisee_lidar) StderrLine: {'line': b'  622 |           std::is_same_v<T, SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.747427] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.747464] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:622:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.747502] (kruisee_lidar) StderrLine: {'line': b'  622 |           std::is_same_v<T, SharedPtrSerializedMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.747540] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.747577] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:780:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.747616] (kruisee_lidar) StderrLine: {'line': b'  780 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageCallback>||\n'}
[0.747653] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.747690] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.747726] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:780:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.747763] (kruisee_lidar) StderrLine: {'line': b'  780 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageCallback>||\n'}
[0.747800] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.747836] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:780:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.747873] (kruisee_lidar) StderrLine: {'line': b'  780 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.747910] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.747946] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:780:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.748025] (kruisee_lidar) StderrLine: {'line': b'  780 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.748110] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.748171] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:626:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.748210] (kruisee_lidar) StderrLine: {'line': b'  626 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.748348] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.748385] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.748420] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:626:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.748455] (kruisee_lidar) StderrLine: {'line': b'  626 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.748490] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.748524] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:626:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.748560] (kruisee_lidar) StderrLine: {'line': b'  626 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.748629] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.748667] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:626:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.748705] (kruisee_lidar) StderrLine: {'line': b'  626 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.748742] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.748779] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:781:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.748820] (kruisee_lidar) StderrLine: {'line': b'  781 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.748857] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.748894] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.748930] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:781:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.748966] (kruisee_lidar) StderrLine: {'line': b'  781 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.749036] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.749072] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:781:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.749107] (kruisee_lidar) StderrLine: {'line': b'  781 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.749143] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.749178] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:781:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.749215] (kruisee_lidar) StderrLine: {'line': b'  781 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.749251] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.749286] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:627:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.749324] (kruisee_lidar) StderrLine: {'line': b'  627 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.749360] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.749397] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.749435] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:627:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.749472] (kruisee_lidar) StderrLine: {'line': b'  627 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.749534] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.749571] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:627:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.749642] (kruisee_lidar) StderrLine: {'line': b'  627 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.749735] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.749770] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:627:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.749807] (kruisee_lidar) StderrLine: {'line': b'  627 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.749842] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.749878] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:782:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.749916] (kruisee_lidar) StderrLine: {'line': b'  782 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.749952] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.749987] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.750021] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:782:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.750057] (kruisee_lidar) StderrLine: {'line': b'  782 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.750092] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.750127] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:782:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.750161] (kruisee_lidar) StderrLine: {'line': b'  782 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.750196] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.750231] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:782:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.750267] (kruisee_lidar) StderrLine: {'line': b'  782 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.750302] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.750336] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:628:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.750371] (kruisee_lidar) StderrLine: {'line': b'  628 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.750407] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.750441] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.750475] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:628:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.750510] (kruisee_lidar) StderrLine: {'line': b'  628 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.750545] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.750580] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:628:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.750617] (kruisee_lidar) StderrLine: {'line': b'  628 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.750652] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.750688] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:628:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.750722] (kruisee_lidar) StderrLine: {'line': b'  628 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.750758] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.750795] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:783:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.750836] (kruisee_lidar) StderrLine: {'line': b'  783 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.750879] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.750929] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.750970] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:783:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.751008] (kruisee_lidar) StderrLine: {'line': b'  783 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.751119] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.751164] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:783:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.751215] (kruisee_lidar) StderrLine: {'line': b'  783 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.751268] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.751317] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:783:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.751368] (kruisee_lidar) StderrLine: {'line': b'  783 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.751405] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.751440] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:784:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.751482] (kruisee_lidar) StderrLine: {'line': b'  784 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageCallback>||\n'}
[0.751517] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.751552] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.751588] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:784:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.751623] (kruisee_lidar) StderrLine: {'line': b'  784 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageCallback>||\n'}
[0.751658] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.751694] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:784:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.751729] (kruisee_lidar) StderrLine: {'line': b'  784 |           std::is_same_v<T, SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.751764] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.751801] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:636:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.751837] (kruisee_lidar) StderrLine: {'line': b'  636 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefCallback>||\n'}
[0.751873] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.751910] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.751947] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:784:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.751985] (kruisee_lidar) StderrLine: {'line': b'  784 |           std::is_same_v<T, SharedPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.752022] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.752059] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:636:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.752095] (kruisee_lidar) StderrLine: {'line': b'  636 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefCallback>||\n'}
[0.752135] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.752180] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:636:45:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.752218] (kruisee_lidar) StderrLine: {'line': b'  636 |           std::is_same_v<T, ConstRefCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.752256] (kruisee_lidar) StderrLine: {'line': b'      |                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.752343] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:636:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.752382] (kruisee_lidar) StderrLine: {'line': b'  636 |           std::is_same_v<T, ConstRefCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.752419] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.752454] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:785:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.752494] (kruisee_lidar) StderrLine: {'line': b'  785 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.752528] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.752561] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.752596] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:785:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.752632] (kruisee_lidar) StderrLine: {'line': b'  785 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.752667] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.752702] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:785:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.752737] (kruisee_lidar) StderrLine: {'line': b'  785 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.752772] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.752806] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:785:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.752843] (kruisee_lidar) StderrLine: {'line': b'  785 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.752879] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.752915] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:637:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.752951] (kruisee_lidar) StderrLine: {'line': b'  637 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefROSMessageCallback>||\n'}
[0.752987] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.753021] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.753058] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:637:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.753136] (kruisee_lidar) StderrLine: {'line': b'  637 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefROSMessageCallback>||\n'}
[0.753173] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.753208] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:637:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.753243] (kruisee_lidar) StderrLine: {'line': b'  637 |           std::is_same_v<T, ConstRefROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.753278] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.753312] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:637:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.753348] (kruisee_lidar) StderrLine: {'line': b'  637 |           std::is_same_v<T, ConstRefROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.753381] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.753415] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch_intra_process(std::unique_ptr<typename rclcpp::TypeAdapter<MessageT>::custom_type, typename rclcpp::detail::MessageDeleterHelper<typename rclcpp::TypeAdapter<MessageT>::custom_type, AllocatorT>::Deleter>, const rclcpp::MessageInfo&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.753454] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:813:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.753491] (kruisee_lidar) StderrLine: {'line': b'  813 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.753525] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.753559] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:813:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.753594] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:638:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.753631] (kruisee_lidar) StderrLine: {'line': b'  638 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoCallback>||\n'}
[0.753665] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.753700] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.753734] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:638:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.753770] (kruisee_lidar) StderrLine: {'line': b'  638 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoCallback>||\n'}
[0.753805] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.753841] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:638:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.753876] (kruisee_lidar) StderrLine: {'line': b'  638 |           std::is_same_v<T, ConstRefWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.753912] (kruisee_lidar) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.753947] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:638:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.753982] (kruisee_lidar) StderrLine: {'line': b'  638 |           std::is_same_v<T, ConstRefWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.754017] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.754054] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In lambda function:\n'}
[0.754091] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:824:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.754129] (kruisee_lidar) StderrLine: {'line': b'  824 |         if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefCallback>) {\n'}
[0.754166] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.754202] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.754239] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:824:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.754276] (kruisee_lidar) StderrLine: {'line': b'  824 |         if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefCallback>) {\n'}
[0.754313] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.754349] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:824:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.754387] (kruisee_lidar) StderrLine: {'line': b'  824 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.754423] (kruisee_lidar) StderrLine: {'line': b'      |                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.754459] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:824:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.754496] (kruisee_lidar) StderrLine: {'line': b'  824 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.754532] (kruisee_lidar) StderrLine: {'line': b'      |                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.754568] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:639:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.754636] (kruisee_lidar) StderrLine: {'line': b'  639 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoROSMessageCallback>||\n'}
[0.754673] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.754709] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.754746] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:639:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.754803] (kruisee_lidar) StderrLine: {'line': b'  639 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoROSMessageCallback>||\n'}
[0.754839] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.754892] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:639:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.754934] (kruisee_lidar) StderrLine: {'line': b'  639 |           std::is_same_v<T, ConstRefWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.754968] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.755005] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:639:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.755102] (kruisee_lidar) StderrLine: {'line': b'  639 |           std::is_same_v<T, ConstRefWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.755138] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.755173] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:826:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.755210] (kruisee_lidar) StderrLine: {'line': b'  826 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.755246] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.755280] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.755314] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:826:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.755349] (kruisee_lidar) StderrLine: {'line': b'  826 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.755384] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.755419] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:826:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.755456] (kruisee_lidar) StderrLine: {'line': b'  826 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT\n'}
[0.755491] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.755525] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:826:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.755559] (kruisee_lidar) StderrLine: {'line': b'  826 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT\n'}
[0.755594] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.755628] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:640:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.755665] (kruisee_lidar) StderrLine: {'line': b'  640 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrCallback>||\n'}
[0.755701] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.755737] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.755774] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:640:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.755812] (kruisee_lidar) StderrLine: {'line': b'  640 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrCallback>||\n'}
[0.755848] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.755886] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:640:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.755923] (kruisee_lidar) StderrLine: {'line': b'  640 |           std::is_same_v<T, UniquePtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.755960] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.755997] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:640:47:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.756070] (kruisee_lidar) StderrLine: {'line': b'  640 |           std::is_same_v<T, UniquePtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.756142] (kruisee_lidar) StderrLine: {'line': b'      |                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.756201] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:830:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.756259] (kruisee_lidar) StderrLine: {'line': b'  830 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrCallback>||\n'}
[0.756321] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.756380] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.756417] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:830:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.756474] (kruisee_lidar) StderrLine: {'line': b'  830 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrCallback>||\n'}
[0.756536] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.756596] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:830:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.756641] (kruisee_lidar) StderrLine: {'line': b'  830 |             std::is_same_v<T, UniquePtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.756681] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.756719] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:830:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.756799] (kruisee_lidar) StderrLine: {'line': b'  830 |             std::is_same_v<T, UniquePtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.756836] (kruisee_lidar) StderrLine: {'line': b'      |                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.756872] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:641:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.756911] (kruisee_lidar) StderrLine: {'line': b'  641 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrROSMessageCallback>||\n'}
[0.756945] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.756980] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.757014] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:641:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.757049] (kruisee_lidar) StderrLine: {'line': b'  641 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrROSMessageCallback>||\n'}
[0.757084] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.757120] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:641:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.757155] (kruisee_lidar) StderrLine: {'line': b'  641 |           std::is_same_v<T, UniquePtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.757190] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.757225] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:641:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.757265] (kruisee_lidar) StderrLine: {'line': b'  641 |           std::is_same_v<T, UniquePtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.757300] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.757335] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:831:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.757379] (kruisee_lidar) StderrLine: {'line': b'  831 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrCallback>))\n'}
[0.757420] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.757475] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.757581] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:831:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.757624] (kruisee_lidar) StderrLine: {'line': b'  831 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrCallback>))\n'}
[0.757678] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.757732] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:831:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.757774] (kruisee_lidar) StderrLine: {'line': b'  831 |             std::is_same_v<T, SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K))\n'}
[0.757810] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.757844] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:831:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.757879] (kruisee_lidar) StderrLine: {'line': b'  831 |             std::is_same_v<T, SharedPtrCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.757916] (kruisee_lidar) StderrLine: {'line': b'      |                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.757950] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:642:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.757986] (kruisee_lidar) StderrLine: {'line': b'  642 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoCallback>||\n'}
[0.758021] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.758056] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.758090] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:642:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.758125] (kruisee_lidar) StderrLine: {'line': b'  642 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoCallback>||\n'}
[0.758159] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.758196] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:642:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.758234] (kruisee_lidar) StderrLine: {'line': b'  642 |           std::is_same_v<T, UniquePtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.758267] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.758304] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:642:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.758370] (kruisee_lidar) StderrLine: {'line': b'  642 |           std::is_same_v<T, UniquePtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.758406] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.758442] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:836:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.758479] (kruisee_lidar) StderrLine: {'line': b'  836 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoCallback>||\n'}
[0.758516] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.758553] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.758589] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:836:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.758625] (kruisee_lidar) StderrLine: {'line': b'  836 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoCallback>||\n'}
[0.758662] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.758698] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:836:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.758734] (kruisee_lidar) StderrLine: {'line': b'  836 |             std::is_same_v<T, UniquePtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.758770] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.758806] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:836:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.758841] (kruisee_lidar) StderrLine: {'line': b'  836 |             std::is_same_v<T, UniquePtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.758929] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.758966] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:643:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.759004] (kruisee_lidar) StderrLine: {'line': b'  643 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoROSMessageCallback>||\n'}
[0.759039] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.759075] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.759110] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:643:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.759144] (kruisee_lidar) StderrLine: {'line': b'  643 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoROSMessageCallback>||\n'}
[0.759177] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.759212] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:643:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.759246] (kruisee_lidar) StderrLine: {'line': b'  643 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.759280] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.759314] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:643:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.759350] (kruisee_lidar) StderrLine: {'line': b'  643 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.759384] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.759418] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:837:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.759452] (kruisee_lidar) StderrLine: {'line': b'  837 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoCallback>\n'}
[0.759486] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.759519] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.759553] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:837:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.759588] (kruisee_lidar) StderrLine: {'line': b'  837 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoCallback>\n'}
[0.759625] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.759660] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:837:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.759697] (kruisee_lidar) StderrLine: {'line': b'  837 |             std::is_same_v<T, SharedPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.759731] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.759765] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:838:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.759802] (kruisee_lidar) StderrLine: {'line': b'  838 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.759836] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.759870] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:644:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.759906] (kruisee_lidar) StderrLine: {'line': b'  644 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrCallback>||\n'}
[0.759941] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.759974] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.760009] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:644:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.760044] (kruisee_lidar) StderrLine: {'line': b'  644 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrCallback>||\n'}
[0.760078] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.760113] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:644:51:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.760147] (kruisee_lidar) StderrLine: {'line': b'  644 |           std::is_same_v<T, SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.760182] (kruisee_lidar) StderrLine: {'line': b'      |                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.760218] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:644:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.760253] (kruisee_lidar) StderrLine: {'line': b'  644 |           std::is_same_v<T, SharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.760289] (kruisee_lidar) StderrLine: {'line': b'      |                                                    \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.760325] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:843:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.760360] (kruisee_lidar) StderrLine: {'line': b'  843 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrCallback>||\n'}
[0.760394] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.760428] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.760463] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:843:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.760499] (kruisee_lidar) StderrLine: {'line': b'  843 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrCallback>||\n'}
[0.760552] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.760600] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:843:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.760654] (kruisee_lidar) StderrLine: {'line': b'  843 |             std::is_same_v<T, SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.760693] (kruisee_lidar) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.760730] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:843:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.760768] (kruisee_lidar) StderrLine: {'line': b'  843 |             std::is_same_v<T, SharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.760806] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.760843] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:645:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.760881] (kruisee_lidar) StderrLine: {'line': b'  645 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrROSMessageCallback>||\n'}
[0.760917] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.760954] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.760989] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:645:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.761027] (kruisee_lidar) StderrLine: {'line': b'  645 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrROSMessageCallback>||\n'}
[0.761068] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.761105] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:844:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.761144] (kruisee_lidar) StderrLine: {'line': b'  844 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrCallback>\n'}
[0.761182] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.761217] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.761255] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:844:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.761290] (kruisee_lidar) StderrLine: {'line': b'  844 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrCallback>\n'}
[0.761338] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.761377] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:645:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.761418] (kruisee_lidar) StderrLine: {'line': b'  645 |           std::is_same_v<T, SharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.761453] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.761489] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:844:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.761523] (kruisee_lidar) StderrLine: {'line': b'  844 |             std::is_same_v<T, ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.761558] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.761592] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:845:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.761630] (kruisee_lidar) StderrLine: {'line': b'  845 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.761665] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.761700] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:645:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.761735] (kruisee_lidar) StderrLine: {'line': b'  645 |           std::is_same_v<T, SharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.761769] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.761803] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:850:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.761839] (kruisee_lidar) StderrLine: {'line': b'  850 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoCallback>||\n'}
[0.761875] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.761910] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.761944] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:850:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.761980] (kruisee_lidar) StderrLine: {'line': b'  850 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoCallback>||\n'}
[0.762015] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.762050] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:850:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.762084] (kruisee_lidar) StderrLine: {'line': b'  850 |             std::is_same_v<T, SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.762120] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.762157] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:850:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.762193] (kruisee_lidar) StderrLine: {'line': b'  850 |             std::is_same_v<T, SharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.762240] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.762294] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:646:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.762344] (kruisee_lidar) StderrLine: {'line': b'  646 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoCallback>||\n'}
[0.762382] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.762417] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.762453] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:646:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.762492] (kruisee_lidar) StderrLine: {'line': b'  646 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoCallback>||\n'}
[0.762528] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.762562] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:646:59:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.762600] (kruisee_lidar) StderrLine: {'line': b'  646 |           std::is_same_v<T, SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.762636] (kruisee_lidar) StderrLine: {'line': b'      |                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.762671] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:646:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.762707] (kruisee_lidar) StderrLine: {'line': b'  646 |           std::is_same_v<T, SharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.762742] (kruisee_lidar) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.762776] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:851:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.762813] (kruisee_lidar) StderrLine: {'line': b'  851 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoCallback>\n'}
[0.762848] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.762900] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.762936] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:851:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.762974] (kruisee_lidar) StderrLine: {'line': b'  851 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoCallback>\n'}
[0.763008] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.763043] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:851:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.763078] (kruisee_lidar) StderrLine: {'line': b'  851 |             std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.763114] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.763149] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:852:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.763184] (kruisee_lidar) StderrLine: {'line': b'  852 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.763223] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.763273] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:647:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.763324] (kruisee_lidar) StderrLine: {'line': b'  647 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.763377] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.763444] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.763500] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:647:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.763556] (kruisee_lidar) StderrLine: {'line': b'  647 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.763616] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.763675] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:647:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.763733] (kruisee_lidar) StderrLine: {'line': b'  647 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.763779] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.763815] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:647:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.763852] (kruisee_lidar) StderrLine: {'line': b'  647 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.763887] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.763921] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:857:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.763965] (kruisee_lidar) StderrLine: {'line': b'  857 |         else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.764004] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.764039] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.764075] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:857:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.764111] (kruisee_lidar) StderrLine: {'line': b'  857 |         else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.764146] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.764180] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:857:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.764216] (kruisee_lidar) StderrLine: {'line': b'  857 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT[readability/braces]\n'}
[0.764250] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.764285] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:857:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.764324] (kruisee_lidar) StderrLine: {'line': b'  857 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT[readability/braces]\n'}
[0.764359] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.764407] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:648:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.764457] (kruisee_lidar) StderrLine: {'line': b'  648 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrCallback>||\n'}
[0.764506] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.764558] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.764610] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:648:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.764661] (kruisee_lidar) StderrLine: {'line': b'  648 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrCallback>||\n'}
[0.764710] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.764758] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:648:59:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.764815] (kruisee_lidar) StderrLine: {'line': b'  648 |           std::is_same_v<T, ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.764874] (kruisee_lidar) StderrLine: {'line': b'      |                                                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.764925] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:648:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.764978] (kruisee_lidar) StderrLine: {'line': b'  648 |           std::is_same_v<T, ConstRefSharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.765034] (kruisee_lidar) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.765086] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:864:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.765140] (kruisee_lidar) StderrLine: {'line': b'  864 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.765194] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.765249] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.765300] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:864:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.765350] (kruisee_lidar) StderrLine: {'line': b'  864 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.765387] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.765423] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:864:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.765459] (kruisee_lidar) StderrLine: {'line': b'  864 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT[readability/braces]\n'}
[0.765505] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.765560] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:864:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.765597] (kruisee_lidar) StderrLine: {'line': b'  864 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT[readability/braces]\n'}
[0.765635] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.765669] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:649:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.765710] (kruisee_lidar) StderrLine: {'line': b'  649 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrROSMessageCallback>||\n'}
[0.765745] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.765783] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.765818] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:649:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.765853] (kruisee_lidar) StderrLine: {'line': b'  649 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrROSMessageCallback>||\n'}
[0.765888] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.765922] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:649:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.765957] (kruisee_lidar) StderrLine: {'line': b'  649 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.765991] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.766026] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:649:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.766061] (kruisee_lidar) StderrLine: {'line': b'  649 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.766097] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.766131] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:872:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.766166] (kruisee_lidar) StderrLine: {'line': b'  872 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrROSMessageCallback>||\n'}
[0.766201] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.766236] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.766271] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:872:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.766306] (kruisee_lidar) StderrLine: {'line': b'  872 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrROSMessageCallback>||\n'}
[0.766340] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.766375] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:872:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.766409] (kruisee_lidar) StderrLine: {'line': b'  872 |           std::is_same_v<T, UniquePtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.766447] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.766481] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:872:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.766516] (kruisee_lidar) StderrLine: {'line': b'  872 |           std::is_same_v<T, UniquePtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.766550] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.766585] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:650:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.766622] (kruisee_lidar) StderrLine: {'line': b'  650 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoCallback>||\n'}
[0.766656] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.766691] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.766725] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:650:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.766762] (kruisee_lidar) StderrLine: {'line': b'  650 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoCallback>||\n'}
[0.766796] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.766832] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:650:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.766876] (kruisee_lidar) StderrLine: {'line': b'  650 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.766915] (kruisee_lidar) StderrLine: {'line': b'      |                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.766950] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:650:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.766987] (kruisee_lidar) StderrLine: {'line': b'  650 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.767022] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.767057] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:873:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.767093] (kruisee_lidar) StderrLine: {'line': b'  873 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrROSMessageCallback>)\n'}
[0.767128] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.767163] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.767200] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:873:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.767235] (kruisee_lidar) StderrLine: {'line': b'  873 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrROSMessageCallback>)\n'}
[0.767271] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.767305] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:873:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.767340] (kruisee_lidar) StderrLine: {'line': b'  873 |           std::is_same_v<T, SharedPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.767375] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.767410] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:873:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.767445] (kruisee_lidar) StderrLine: {'line': b'  873 |           std::is_same_v<T, SharedPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.767481] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.767515] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:651:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.767551] (kruisee_lidar) StderrLine: {'line': b'  651 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.767585] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.767620] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.767654] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:651:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.767687] (kruisee_lidar) StderrLine: {'line': b'  651 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.767722] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.767756] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:651:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.767790] (kruisee_lidar) StderrLine: {'line': b'  651 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.767825] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.767858] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:651:78:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.767894] (kruisee_lidar) StderrLine: {'line': b'  651 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.767929] (kruisee_lidar) StderrLine: {'line': b'      |                                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.767963] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:881:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.767998] (kruisee_lidar) StderrLine: {'line': b'  881 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoROSMessageCallback>||\n'}
[0.768032] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.768066] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.768102] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:881:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.768137] (kruisee_lidar) StderrLine: {'line': b'  881 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoROSMessageCallback>||\n'}
[0.768174] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.768208] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:881:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.768242] (kruisee_lidar) StderrLine: {'line': b'  881 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.768277] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.768311] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:881:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.768346] (kruisee_lidar) StderrLine: {'line': b'  881 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.768380] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.768415] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:652:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.768450] (kruisee_lidar) StderrLine: {'line': b'  652 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrCallback>||\n'}
[0.768485] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.768519] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.768554] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:652:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.768589] (kruisee_lidar) StderrLine: {'line': b'  652 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrCallback>||\n'}
[0.768624] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.768660] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:652:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.768695] (kruisee_lidar) StderrLine: {'line': b'  652 |           std::is_same_v<T, SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.768730] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.768764] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:652:47:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.768798] (kruisee_lidar) StderrLine: {'line': b'  652 |           std::is_same_v<T, SharedPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.768833] (kruisee_lidar) StderrLine: {'line': b'      |                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.768866] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:882:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.768901] (kruisee_lidar) StderrLine: {'line': b'  882 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoROSMessageCallback>)\n'}
[0.768935] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.768969] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.769003] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:882:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.769038] (kruisee_lidar) StderrLine: {'line': b'  882 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoROSMessageCallback>)\n'}
[0.769073] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.769107] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:882:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.769142] (kruisee_lidar) StderrLine: {'line': b'  882 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.769177] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.769212] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:882:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.769246] (kruisee_lidar) StderrLine: {'line': b'  882 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.769281] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.769329] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:653:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.769388] (kruisee_lidar) StderrLine: {'line': b'  653 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrROSMessageCallback>||\n'}
[0.769442] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.769480] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.769516] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:653:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.769554] (kruisee_lidar) StderrLine: {'line': b'  653 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrROSMessageCallback>||\n'}
[0.769589] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.769624] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:653:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.769659] (kruisee_lidar) StderrLine: {'line': b'  653 |           std::is_same_v<T, SharedPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.769694] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.769728] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:653:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.769763] (kruisee_lidar) StderrLine: {'line': b'  653 |           std::is_same_v<T, SharedPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.769797] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.769831] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:890:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.769866] (kruisee_lidar) StderrLine: {'line': b'  890 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrROSMessageCallback>||\n'}
[0.769901] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.769935] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.769968] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:890:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.770004] (kruisee_lidar) StderrLine: {'line': b'  890 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrROSMessageCallback>||\n'}
[0.770040] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.770074] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:890:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.770110] (kruisee_lidar) StderrLine: {'line': b'  890 |           std::is_same_v<T, SharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.770144] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.770183] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:890:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.770219] (kruisee_lidar) StderrLine: {'line': b'  890 |           std::is_same_v<T, SharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.770254] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.770290] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:654:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.770326] (kruisee_lidar) StderrLine: {'line': b'  654 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoCallback>||\n'}
[0.770361] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.770395] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.770431] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:654:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.770465] (kruisee_lidar) StderrLine: {'line': b'  654 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoCallback>||\n'}
[0.770503] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.770551] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:654:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.770589] (kruisee_lidar) StderrLine: {'line': b'  654 |           std::is_same_v<T, SharedPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.770624] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.770660] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:654:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.770698] (kruisee_lidar) StderrLine: {'line': b'  654 |           std::is_same_v<T, SharedPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.770733] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.770768] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:891:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.770805] (kruisee_lidar) StderrLine: {'line': b'  891 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrROSMessageCallback>)\n'}
[0.770840] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.770887] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.770922] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:891:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.770959] (kruisee_lidar) StderrLine: {'line': b'  891 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrROSMessageCallback>)\n'}
[0.770994] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.771028] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:891:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.771063] (kruisee_lidar) StderrLine: {'line': b'  891 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.771098] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.771131] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:891:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.771166] (kruisee_lidar) StderrLine: {'line': b'  891 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.771201] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.771236] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:655:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.771272] (kruisee_lidar) StderrLine: {'line': b'  655 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoROSMessageCallback>)\n'}
[0.771307] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.771341] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.771376] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:655:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.771412] (kruisee_lidar) StderrLine: {'line': b'  655 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoROSMessageCallback>)\n'}
[0.771447] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.771482] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:655:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.771517] (kruisee_lidar) StderrLine: {'line': b'  655 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.771551] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.771586] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:655:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.771621] (kruisee_lidar) StderrLine: {'line': b'  655 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.771655] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.771691] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:899:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.771726] (kruisee_lidar) StderrLine: {'line': b'  899 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.771760] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.771794] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.771827] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:899:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.771863] (kruisee_lidar) StderrLine: {'line': b'  899 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.771898] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.771933] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:899:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.771967] (kruisee_lidar) StderrLine: {'line': b'  899 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.772001] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.772035] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:899:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.772071] (kruisee_lidar) StderrLine: {'line': b'  899 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.772105] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.772139] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch_intra_process(std::shared_ptr<const typename rclcpp::TypeAdapter<MessageT>::custom_type>, const rclcpp::MessageInfo&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.772177] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:683:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.772213] (kruisee_lidar) StderrLine: {'line': b'  683 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.772247] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.772282] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:683:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.772317] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:900:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.772353] (kruisee_lidar) StderrLine: {'line': b'  900 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>)\n'}
[0.772388] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.772422] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.772456] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:900:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.772492] (kruisee_lidar) StderrLine: {'line': b'  900 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoROSMessageCallback>)\n'}
[0.772526] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.772561] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:900:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.772596] (kruisee_lidar) StderrLine: {'line': b'  900 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.772632] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.772667] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:900:78:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.772701] (kruisee_lidar) StderrLine: {'line': b'  900 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.772736] (kruisee_lidar) StderrLine: {'line': b'      |                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.772772] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In lambda function:\n'}
[0.772809] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:689:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.772845] (kruisee_lidar) StderrLine: {'line': b'  689 |         if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefCallback>) {\n'}
[0.772881] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.772916] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.772953] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:689:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.772989] (kruisee_lidar) StderrLine: {'line': b'  689 |         if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefCallback>) {\n'}
[0.773025] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.773061] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:689:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.773098] (kruisee_lidar) StderrLine: {'line': b'  689 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.773133] (kruisee_lidar) StderrLine: {'line': b'      |                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.773168] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:689:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.773203] (kruisee_lidar) StderrLine: {'line': b'  689 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.773243] (kruisee_lidar) StderrLine: {'line': b'      |                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.773298] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:910:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.773356] (kruisee_lidar) StderrLine: {'line': b'  910 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageCallback>||\n'}
[0.773407] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.773459] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.773508] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:910:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.773558] (kruisee_lidar) StderrLine: {'line': b'  910 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageCallback>||\n'}
[0.773607] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.773663] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:910:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.773713] (kruisee_lidar) StderrLine: {'line': b'  910 |           std::is_same_v<T, ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.773766] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.773820] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:910:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.773874] (kruisee_lidar) StderrLine: {'line': b'  910 |           std::is_same_v<T, ConstRefSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.773929] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.773983] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:691:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.774038] (kruisee_lidar) StderrLine: {'line': b'  691 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.774082] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.774117] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.774153] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:691:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.774189] (kruisee_lidar) StderrLine: {'line': b'  691 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.774238] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.774282] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:691:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.774318] (kruisee_lidar) StderrLine: {'line': b'  691 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT\n'}
[0.774353] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.774394] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:691:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.774429] (kruisee_lidar) StderrLine: {'line': b'  691 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT\n'}
[0.774465] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.774500] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:911:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.774537] (kruisee_lidar) StderrLine: {'line': b'  911 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.774572] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.774607] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.774642] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:911:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.774677] (kruisee_lidar) StderrLine: {'line': b'  911 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.774712] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.774747] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:911:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.774784] (kruisee_lidar) StderrLine: {'line': b'  911 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.774818] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.774854] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:911:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.774902] (kruisee_lidar) StderrLine: {'line': b'  911 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.774937] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.774973] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:695:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.775009] (kruisee_lidar) StderrLine: {'line': b'  695 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrCallback>||\n'}
[0.775044] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.775078] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.775111] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:695:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.775146] (kruisee_lidar) StderrLine: {'line': b'  695 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrCallback>||\n'}
[0.775181] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.775215] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:695:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.775250] (kruisee_lidar) StderrLine: {'line': b'  695 |             std::is_same_v<T, UniquePtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.775285] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.775319] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:695:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.775354] (kruisee_lidar) StderrLine: {'line': b'  695 |             std::is_same_v<T, UniquePtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.775388] (kruisee_lidar) StderrLine: {'line': b'      |                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.775422] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:912:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.775457] (kruisee_lidar) StderrLine: {'line': b'  912 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageCallback>||\n'}
[0.775492] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.775525] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.775558] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:912:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.775596] (kruisee_lidar) StderrLine: {'line': b'  912 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageCallback>||\n'}
[0.775631] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.775665] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:912:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.775700] (kruisee_lidar) StderrLine: {'line': b'  912 |           std::is_same_v<T, UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.775741] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.775776] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:912:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.775812] (kruisee_lidar) StderrLine: {'line': b'  912 |           std::is_same_v<T, UniquePtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.775847] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.775881] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:696:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.775916] (kruisee_lidar) StderrLine: {'line': b'  696 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrCallback>\n'}
[0.775950] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.775985] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.776019] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:696:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.776054] (kruisee_lidar) StderrLine: {'line': b'  696 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrCallback>\n'}
[0.776090] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.776124] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:696:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.776159] (kruisee_lidar) StderrLine: {'line': b'  696 |             std::is_same_v<T, SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.776196] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.776231] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:697:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.776273] (kruisee_lidar) StderrLine: {'line': b'  697 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.776324] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.776376] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:913:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.776420] (kruisee_lidar) StderrLine: {'line': b'  913 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.776457] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.776492] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.776527] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:913:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.776562] (kruisee_lidar) StderrLine: {'line': b'  913 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.776596] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.776631] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:913:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.776666] (kruisee_lidar) StderrLine: {'line': b'  913 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.776700] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.776736] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:913:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.776771] (kruisee_lidar) StderrLine: {'line': b'  913 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.776819] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.776867] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:702:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.776909] (kruisee_lidar) StderrLine: {'line': b'  702 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoCallback>||\n'}
[0.776954] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.776994] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.777029] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:702:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.777065] (kruisee_lidar) StderrLine: {'line': b'  702 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoCallback>||\n'}
[0.777100] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.777136] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:702:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.777174] (kruisee_lidar) StderrLine: {'line': b'  702 |             std::is_same_v<T, UniquePtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.777208] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.777243] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:702:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.777278] (kruisee_lidar) StderrLine: {'line': b'  702 |             std::is_same_v<T, UniquePtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.777312] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.777347] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:914:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.777383] (kruisee_lidar) StderrLine: {'line': b'  914 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageCallback>||\n'}
[0.777418] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.777466] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.777518] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:914:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.777575] (kruisee_lidar) StderrLine: {'line': b'  914 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageCallback>||\n'}
[0.777625] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.777677] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:914:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.777730] (kruisee_lidar) StderrLine: {'line': b'  914 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.777781] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.777831] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:914:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.777887] (kruisee_lidar) StderrLine: {'line': b'  914 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.777936] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.777992] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:703:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.778049] (kruisee_lidar) StderrLine: {'line': b'  703 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoCallback>\n'}
[0.778099] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.778159] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.778213] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:703:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.778265] (kruisee_lidar) StderrLine: {'line': b'  703 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoCallback>\n'}
[0.778302] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.778337] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:703:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.778375] (kruisee_lidar) StderrLine: {'line': b'  703 |             std::is_same_v<T, SharedPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.778435] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.778473] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:704:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.778510] (kruisee_lidar) StderrLine: {'line': b'  704 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.778545] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.778579] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:915:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.778616] (kruisee_lidar) StderrLine: {'line': b'  915 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.778654] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.778688] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.778722] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:915:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.778757] (kruisee_lidar) StderrLine: {'line': b'  915 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.778792] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.778826] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:915:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.778877] (kruisee_lidar) StderrLine: {'line': b'  915 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.778916] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.778951] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:915:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.778986] (kruisee_lidar) StderrLine: {'line': b'  915 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.779024] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.779058] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:709:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.779094] (kruisee_lidar) StderrLine: {'line': b'  709 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrCallback>||\n'}
[0.779132] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.779167] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.779200] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:709:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.779236] (kruisee_lidar) StderrLine: {'line': b'  709 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrCallback>||\n'}
[0.779270] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.779304] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:709:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.779339] (kruisee_lidar) StderrLine: {'line': b'  709 |             std::is_same_v<T, SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.779373] (kruisee_lidar) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.779409] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:709:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.779443] (kruisee_lidar) StderrLine: {'line': b'  709 |             std::is_same_v<T, SharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.779478] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.779511] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:916:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.779547] (kruisee_lidar) StderrLine: {'line': b'  916 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.779581] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.779615] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.779650] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:916:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.779687] (kruisee_lidar) StderrLine: {'line': b'  916 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.779722] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.779758] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:916:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.779793] (kruisee_lidar) StderrLine: {'line': b'  916 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.779826] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.779860] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:916:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.779894] (kruisee_lidar) StderrLine: {'line': b'  916 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.779928] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.779961] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:710:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.779997] (kruisee_lidar) StderrLine: {'line': b'  710 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrCallback>\n'}
[0.780031] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.780066] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.780101] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:710:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.780136] (kruisee_lidar) StderrLine: {'line': b'  710 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrCallback>\n'}
[0.780170] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.780204] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:710:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.780239] (kruisee_lidar) StderrLine: {'line': b'  710 |             std::is_same_v<T, ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.780273] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.780307] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:711:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.780342] (kruisee_lidar) StderrLine: {'line': b'  711 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.780376] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.780410] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:917:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.780451] (kruisee_lidar) StderrLine: {'line': b'  917 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.780486] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.780520] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.780556] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:917:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.780590] (kruisee_lidar) StderrLine: {'line': b'  917 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.780624] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.780659] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:917:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.780693] (kruisee_lidar) StderrLine: {'line': b'  917 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.780727] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.780761] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:917:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.780796] (kruisee_lidar) StderrLine: {'line': b'  917 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.780832] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.780866] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:716:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.780901] (kruisee_lidar) StderrLine: {'line': b'  716 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoCallback>||\n'}
[0.780936] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.780970] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.781004] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:716:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.781038] (kruisee_lidar) StderrLine: {'line': b'  716 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoCallback>||\n'}
[0.781072] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.781107] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:716:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.781141] (kruisee_lidar) StderrLine: {'line': b'  716 |             std::is_same_v<T, SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.781175] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.781212] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:716:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.781246] (kruisee_lidar) StderrLine: {'line': b'  716 |             std::is_same_v<T, SharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.781281] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.781315] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:918:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.781350] (kruisee_lidar) StderrLine: {'line': b'  918 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageCallback>||\n'}
[0.781384] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.781418] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.781452] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:918:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.781486] (kruisee_lidar) StderrLine: {'line': b'  918 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageCallback>||\n'}
[0.781520] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.781554] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:918:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.781589] (kruisee_lidar) StderrLine: {'line': b'  918 |           std::is_same_v<T, SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.781624] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.781657] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:918:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.781693] (kruisee_lidar) StderrLine: {'line': b'  918 |           std::is_same_v<T, SharedPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.781728] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.781762] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:717:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.781800] (kruisee_lidar) StderrLine: {'line': b'  717 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoCallback>\n'}
[0.781835] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.781869] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.781903] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:717:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.781940] (kruisee_lidar) StderrLine: {'line': b'  717 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoCallback>\n'}
[0.781974] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.782011] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:717:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.782045] (kruisee_lidar) StderrLine: {'line': b'  717 |             std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.782080] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.782114] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:718:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.782150] (kruisee_lidar) StderrLine: {'line': b'  718 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.782185] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.782219] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:919:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.782254] (kruisee_lidar) StderrLine: {'line': b'  919 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.782289] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.782323] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.782357] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:919:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.782393] (kruisee_lidar) StderrLine: {'line': b'  919 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.782427] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.782461] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:919:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.782496] (kruisee_lidar) StderrLine: {'line': b'  919 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.782530] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.782564] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:919:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.782599] (kruisee_lidar) StderrLine: {'line': b'  919 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.782632] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.782669] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:723:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.782705] (kruisee_lidar) StderrLine: {'line': b'  723 |         else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.782740] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.782775] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.782810] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:723:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.782845] (kruisee_lidar) StderrLine: {'line': b'  723 |         else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.782887] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.782922] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:723:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.782959] (kruisee_lidar) StderrLine: {'line': b'  723 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT[readability/braces]\n'}
[0.782994] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.783030] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:723:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.783066] (kruisee_lidar) StderrLine: {'line': b'  723 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT[readability/braces]\n'}
[0.783100] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.783136] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:730:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.783172] (kruisee_lidar) StderrLine: {'line': b'  730 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.783208] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.783257] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.783307] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:730:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.783360] (kruisee_lidar) StderrLine: {'line': b'  730 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.783401] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.783437] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:730:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.783471] (kruisee_lidar) StderrLine: {'line': b'  730 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT[readability/braces]\n'}
[0.783506] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.783542] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:730:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.783576] (kruisee_lidar) StderrLine: {'line': b'  730 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT[readability/braces]\n'}
[0.783610] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.783645] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:738:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.783682] (kruisee_lidar) StderrLine: {'line': b'  738 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrROSMessageCallback>||\n'}
[0.783716] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.783751] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.783785] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::use_take_shared_method() const\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.783820] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:938:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.783857] (kruisee_lidar) StderrLine: {'line': b'  938 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedConstPtrCallback>(callback_variant_) ||\n'}
[0.783893] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.783928] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:738:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.783963] (kruisee_lidar) StderrLine: {'line': b'  738 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrROSMessageCallback>||\n'}
[0.783998] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.784033] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:738:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.784070] (kruisee_lidar) StderrLine: {'line': b'  738 |           std::is_same_v<T, UniquePtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.784105] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.784139] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:938:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.784176] (kruisee_lidar) StderrLine: {'line': b'  938 |       std::holds_alternative<SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.784211] (kruisee_lidar) StderrLine: {'line': b'      |                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.784248] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:738:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.784285] (kruisee_lidar) StderrLine: {'line': b'  738 |           std::is_same_v<T, UniquePtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.784319] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.784353] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:739:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.784388] (kruisee_lidar) StderrLine: {'line': b'  739 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrROSMessageCallback>)\n'}
[0.784432] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.784483] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.784535] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:739:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.784589] (kruisee_lidar) StderrLine: {'line': b'  739 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrROSMessageCallback>)\n'}
[0.784639] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.784690] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:739:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.784742] (kruisee_lidar) StderrLine: {'line': b'  739 |           std::is_same_v<T, SharedPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.784791] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.784845] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:739:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.784906] (kruisee_lidar) StderrLine: {'line': b'  739 |           std::is_same_v<T, SharedPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.784959] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.785016] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:747:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.785078] (kruisee_lidar) StderrLine: {'line': b'  747 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoROSMessageCallback>||\n'}
[0.785133] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.785188] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.785242] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:747:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.785283] (kruisee_lidar) StderrLine: {'line': b'  747 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoROSMessageCallback>||\n'}
[0.785320] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.785355] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:747:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.785397] (kruisee_lidar) StderrLine: {'line': b'  747 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.785450] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.785487] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:747:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.785523] (kruisee_lidar) StderrLine: {'line': b'  747 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.785559] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.785595] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:939:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.785630] (kruisee_lidar) StderrLine: {'line': b'  939 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedConstPtrWithInfoCallback>(callback_variant_) ||\n'}
[0.785668] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.785703] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:939:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.785742] (kruisee_lidar) StderrLine: {'line': b'  939 |       std::holds_alternative<SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.785780] (kruisee_lidar) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.785817] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:748:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.785857] (kruisee_lidar) StderrLine: {'line': b'  748 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoROSMessageCallback>)\n'}
[0.785893] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.785929] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.785963] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:748:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.785999] (kruisee_lidar) StderrLine: {'line': b'  748 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoROSMessageCallback>)\n'}
[0.786033] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.786068] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:748:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.786104] (kruisee_lidar) StderrLine: {'line': b'  748 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.786138] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.786173] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:748:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.786208] (kruisee_lidar) StderrLine: {'line': b'  748 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.786244] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.786279] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:940:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.786316] (kruisee_lidar) StderrLine: {'line': b'  940 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<ConstRefSharedConstPtrCallback>(callback_variant_) ||\n'}
[0.786352] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.786386] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:940:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.786422] (kruisee_lidar) StderrLine: {'line': b'  940 |       std::holds_alternative<ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.786458] (kruisee_lidar) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.786493] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:756:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.786530] (kruisee_lidar) StderrLine: {'line': b'  756 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrROSMessageCallback>||\n'}
[0.786566] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.786602] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.786637] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:756:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.786677] (kruisee_lidar) StderrLine: {'line': b'  756 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrROSMessageCallback>||\n'}
[0.786713] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.786747] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:756:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.786782] (kruisee_lidar) StderrLine: {'line': b'  756 |           std::is_same_v<T, SharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.786817] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.786851] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:756:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.786899] (kruisee_lidar) StderrLine: {'line': b'  756 |           std::is_same_v<T, SharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.786935] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.786969] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:757:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.787009] (kruisee_lidar) StderrLine: {'line': b'  757 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrROSMessageCallback>)\n'}
[0.787047] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.787082] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.787116] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:757:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.787153] (kruisee_lidar) StderrLine: {'line': b'  757 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrROSMessageCallback>)\n'}
[0.787188] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.787222] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:757:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.787257] (kruisee_lidar) StderrLine: {'line': b'  757 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.787291] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.787326] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:757:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.787363] (kruisee_lidar) StderrLine: {'line': b'  757 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.787398] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.787433] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:941:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.787469] (kruisee_lidar) StderrLine: {'line': b'  941 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<ConstRefSharedConstPtrWithInfoCallback>(callback_variant_);\n'}
[0.787503] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.787537] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:941:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.787573] (kruisee_lidar) StderrLine: {'line': b'  941 |       std::holds_alternative<ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_);\n'}
[0.787608] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.787643] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:765:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.787678] (kruisee_lidar) StderrLine: {'line': b'  765 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.787713] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.787748] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.787783] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:765:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.787818] (kruisee_lidar) StderrLine: {'line': b'  765 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.787854] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.787888] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:765:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.787922] (kruisee_lidar) StderrLine: {'line': b'  765 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.787957] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.787991] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:765:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.788027] (kruisee_lidar) StderrLine: {'line': b'  765 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.788061] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.788098] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:766:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.788135] (kruisee_lidar) StderrLine: {'line': b'  766 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>)\n'}
[0.788169] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.788203] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.788237] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:766:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.788273] (kruisee_lidar) StderrLine: {'line': b'  766 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoROSMessageCallback>)\n'}
[0.788309] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.788343] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:766:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.788380] (kruisee_lidar) StderrLine: {'line': b'  766 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.788416] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.788451] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:766:78:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.788486] (kruisee_lidar) StderrLine: {'line': b'  766 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.788521] (kruisee_lidar) StderrLine: {'line': b'      |                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.788556] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::is_serialized_message_callback() const\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.788592] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:949:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.788627] (kruisee_lidar) StderrLine: {'line': b'  949 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<ConstRefSerializedMessageCallback>(callback_variant_) ||\n'}
[0.788662] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.788696] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:949:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.788730] (kruisee_lidar) StderrLine: {'line': b'  949 |       std::holds_alternative<ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.788768] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.788802] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:776:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.788838] (kruisee_lidar) StderrLine: {'line': b'  776 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageCallback>||\n'}
[0.788873] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.788908] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.788941] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:776:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.788976] (kruisee_lidar) StderrLine: {'line': b'  776 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageCallback>||\n'}
[0.789011] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.789045] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:776:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.789081] (kruisee_lidar) StderrLine: {'line': b'  776 |           std::is_same_v<T, ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.789116] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.789150] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:776:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.789186] (kruisee_lidar) StderrLine: {'line': b'  776 |           std::is_same_v<T, ConstRefSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.789221] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.789255] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:950:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.789292] (kruisee_lidar) StderrLine: {'line': b'  950 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<UniquePtrSerializedMessageCallback>(callback_variant_) ||\n'}
[0.789327] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.789367] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:950:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.789403] (kruisee_lidar) StderrLine: {'line': b'  950 |       std::holds_alternative<UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.789438] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.789472] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:777:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.789511] (kruisee_lidar) StderrLine: {'line': b'  777 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.789546] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.789582] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.789616] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:777:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.789652] (kruisee_lidar) StderrLine: {'line': b'  777 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.789687] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.789721] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:777:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.789756] (kruisee_lidar) StderrLine: {'line': b'  777 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.789790] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.789825] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:777:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.789860] (kruisee_lidar) StderrLine: {'line': b'  777 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.789894] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.789929] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:778:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.789965] (kruisee_lidar) StderrLine: {'line': b'  778 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageCallback>||\n'}
[0.789999] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.790034] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.790068] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:778:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.790103] (kruisee_lidar) StderrLine: {'line': b'  778 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageCallback>||\n'}
[0.790138] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.790182] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:778:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.790231] (kruisee_lidar) StderrLine: {'line': b'  778 |           std::is_same_v<T, UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.790287] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.790334] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:778:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.790371] (kruisee_lidar) StderrLine: {'line': b'  778 |           std::is_same_v<T, UniquePtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.790407] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.790442] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:951:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.790483] (kruisee_lidar) StderrLine: {'line': b'  951 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedConstPtrSerializedMessageCallback>(callback_variant_) ||\n'}
[0.790519] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.790555] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:779:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.790591] (kruisee_lidar) StderrLine: {'line': b'  779 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.790626] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.790661] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.790696] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:779:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.790731] (kruisee_lidar) StderrLine: {'line': b'  779 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.790767] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.790802] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:951:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.790842] (kruisee_lidar) StderrLine: {'line': b'  951 |       std::holds_alternative<SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.790890] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.790927] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:779:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.790963] (kruisee_lidar) StderrLine: {'line': b'  779 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.790998] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.791035] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:779:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.791070] (kruisee_lidar) StderrLine: {'line': b'  779 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.791105] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.791141] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:780:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.791176] (kruisee_lidar) StderrLine: {'line': b'  780 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageCallback>||\n'}
[0.791211] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.791247] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.791283] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:780:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.791318] (kruisee_lidar) StderrLine: {'line': b'  780 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageCallback>||\n'}
[0.791352] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.791400] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:780:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.791444] (kruisee_lidar) StderrLine: {'line': b'  780 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.791497] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.791549] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:780:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.791601] (kruisee_lidar) StderrLine: {'line': b'  780 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.791653] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.791705] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:781:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.791763] (kruisee_lidar) StderrLine: {'line': b'  781 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.791820] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.791872] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.791928] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:781:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.791986] (kruisee_lidar) StderrLine: {'line': b'  781 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.792036] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.792090] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:781:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.792142] (kruisee_lidar) StderrLine: {'line': b'  781 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.792188] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.792224] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:781:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.792261] (kruisee_lidar) StderrLine: {'line': b'  781 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.792312] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.792350] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:952:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.792391] (kruisee_lidar) StderrLine: {'line': b'  952 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<ConstRefSharedConstPtrSerializedMessageCallback>(callback_variant_) ||\n'}
[0.792428] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.792462] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:952:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.792497] (kruisee_lidar) StderrLine: {'line': b'  952 |       std::holds_alternative<ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.792532] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.792567] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:782:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.792604] (kruisee_lidar) StderrLine: {'line': b'  782 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.792638] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.792673] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.792707] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:782:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.792744] (kruisee_lidar) StderrLine: {'line': b'  782 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.792778] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.792813] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:782:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.792848] (kruisee_lidar) StderrLine: {'line': b'  782 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.792882] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.792916] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:782:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.792952] (kruisee_lidar) StderrLine: {'line': b'  782 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.792986] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.793021] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:783:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.793058] (kruisee_lidar) StderrLine: {'line': b'  783 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.793093] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.793127] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.793161] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:783:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.793199] (kruisee_lidar) StderrLine: {'line': b'  783 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.793235] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.793269] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:783:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.793304] (kruisee_lidar) StderrLine: {'line': b'  783 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.793339] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.793373] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:783:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.793408] (kruisee_lidar) StderrLine: {'line': b'  783 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.793443] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.793479] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:953:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.793514] (kruisee_lidar) StderrLine: {'line': b'  953 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrSerializedMessageCallback>(callback_variant_);\n'}
[0.793551] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.793585] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:953:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.793621] (kruisee_lidar) StderrLine: {'line': b'  953 |       std::holds_alternative<SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_);\n'}
[0.793657] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.793691] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::register_callback_for_tracing()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.793727] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:960:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.793762] (kruisee_lidar) StderrLine: {'line': b'  960 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.793796] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.793830] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:960:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.793865] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:784:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.793901] (kruisee_lidar) StderrLine: {'line': b'  784 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageCallback>||\n'}
[0.793936] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.793970] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.794005] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:784:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.794039] (kruisee_lidar) StderrLine: {'line': b'  784 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageCallback>||\n'}
[0.794074] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.794109] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:784:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.794145] (kruisee_lidar) StderrLine: {'line': b'  784 |           std::is_same_v<T, SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.794181] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.794216] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:784:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.794251] (kruisee_lidar) StderrLine: {'line': b'  784 |           std::is_same_v<T, SharedPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.794285] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.794320] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:785:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.794356] (kruisee_lidar) StderrLine: {'line': b'  785 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.794390] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.794425] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.794459] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:785:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.794494] (kruisee_lidar) StderrLine: {'line': b'  785 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.794529] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.794564] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:785:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.794598] (kruisee_lidar) StderrLine: {'line': b'  785 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.794632] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.794667] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:785:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.794702] (kruisee_lidar) StderrLine: {'line': b'  785 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.794736] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.794773] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch_intra_process(std::unique_ptr<typename rclcpp::TypeAdapter<MessageT>::custom_type, typename rclcpp::detail::MessageDeleterHelper<typename rclcpp::TypeAdapter<MessageT>::custom_type, AllocatorT>::Deleter>, const rclcpp::MessageInfo&)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.794816] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:813:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.794854] (kruisee_lidar) StderrLine: {'line': b'  813 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.794899] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.794935] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:813:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.794970] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In lambda function:\n'}
[0.795005] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:824:37:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.795042] (kruisee_lidar) StderrLine: {'line': b'  824 |         if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefCallback>) {\n'}
[0.795077] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.795112] (kruisee_lidar) StderrLine: {'line': b'      |                                     \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.795147] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:824:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.795182] (kruisee_lidar) StderrLine: {'line': b'  824 |         if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefCallback>) {\n'}
[0.795217] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.795252] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:824:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.795289] (kruisee_lidar) StderrLine: {'line': b'  824 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {\n'}
[0.795324] (kruisee_lidar) StderrLine: {'line': b'      |                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.795359] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:824:67:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.795394] (kruisee_lidar) StderrLine: {'line': b'  824 |         if constexpr (is_ta && std::is_same_v<T, ConstRefCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {\n'}
[0.795429] (kruisee_lidar) StderrLine: {'line': b'      |                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.795463] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:826:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.795498] (kruisee_lidar) StderrLine: {'line': b'  826 |         } else if constexpr (is_ta && std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.795535] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.795570] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.795605] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:826:55:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.795640] (kruisee_lidar) StderrLine: {'line': b'  826 |         } else if constexpr (is_ta && std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoCallback>) {  // NOLINT\n'}
[0.795674] (kruisee_lidar) StderrLine: {'line': b'      |                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.795709] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:826:81:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.795744] (kruisee_lidar) StderrLine: {'line': b'  826 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT\n'}
[0.795779] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.795813] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:826:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.795848] (kruisee_lidar) StderrLine: {'line': b'  826 |         } else if constexpr (is_ta && std::is_same_v<T, ConstRefWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT\n'}
[0.795884] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.795918] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:830:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.795955] (kruisee_lidar) StderrLine: {'line': b'  830 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrCallback>||\n'}
[0.795990] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.796025] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.796059] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:830:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.796094] (kruisee_lidar) StderrLine: {'line': b'  830 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrCallback>||\n'}
[0.796129] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.796162] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:830:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.796196] (kruisee_lidar) StderrLine: {'line': b'  830 |             std::is_same_v<T, UniquePtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.796231] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.796268] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:830:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.796303] (kruisee_lidar) StderrLine: {'line': b'  830 |             std::is_same_v<T, UniquePtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.796337] (kruisee_lidar) StderrLine: {'line': b'      |                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.796372] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:831:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.796409] (kruisee_lidar) StderrLine: {'line': b'  831 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrCallback>))\n'}
[0.796444] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.796479] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.796513] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:831:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.796547] (kruisee_lidar) StderrLine: {'line': b'  831 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrCallback>))\n'}
[0.796582] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.796616] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:831:48:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.796652] (kruisee_lidar) StderrLine: {'line': b'  831 |             std::is_same_v<T, SharedPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K))\n'}
[0.796687] (kruisee_lidar) StderrLine: {'line': b'      |                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.796722] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:831:49:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.796757] (kruisee_lidar) StderrLine: {'line': b'  831 |             std::is_same_v<T, SharedPtrCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.796792] (kruisee_lidar) StderrLine: {'line': b'      |                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.796826] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:836:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.796862] (kruisee_lidar) StderrLine: {'line': b'  836 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoCallback>||\n'}
[0.796896] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.796930] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.796964] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:836:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.797002] (kruisee_lidar) StderrLine: {'line': b'  836 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoCallback>||\n'}
[0.797048] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.797099] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:836:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.797141] (kruisee_lidar) StderrLine: {'line': b'  836 |             std::is_same_v<T, UniquePtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.797176] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.797211] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:836:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.797248] (kruisee_lidar) StderrLine: {'line': b'  836 |             std::is_same_v<T, UniquePtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.797283] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.797318] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:837:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.797356] (kruisee_lidar) StderrLine: {'line': b'  837 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoCallback>\n'}
[0.797391] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.797425] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.797458] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:837:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.797494] (kruisee_lidar) StderrLine: {'line': b'  837 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoCallback>\n'}
[0.797529] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.797563] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:837:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.797597] (kruisee_lidar) StderrLine: {'line': b'  837 |             std::is_same_v<T, SharedPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.797631] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.797664] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:838:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.797701] (kruisee_lidar) StderrLine: {'line': b'  838 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.797737] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.797771] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:843:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.797809] (kruisee_lidar) StderrLine: {'line': b'  843 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrCallback>||\n'}
[0.797843] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.797878] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.797912] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:843:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.797946] (kruisee_lidar) StderrLine: {'line': b'  843 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrCallback>||\n'}
[0.797981] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.798015] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:843:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.798050] (kruisee_lidar) StderrLine: {'line': b'  843 |             std::is_same_v<T, SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.798085] (kruisee_lidar) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.798119] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:843:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.798155] (kruisee_lidar) StderrLine: {'line': b'  843 |             std::is_same_v<T, SharedConstPtrCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.798189] (kruisee_lidar) StderrLine: {'line': b'      |                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.798224] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:844:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.798259] (kruisee_lidar) StderrLine: {'line': b'  844 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrCallback>\n'}
[0.798294] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.798328] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.798362] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:844:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.798396] (kruisee_lidar) StderrLine: {'line': b'  844 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrCallback>\n'}
[0.798430] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.798464] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:844:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.798499] (kruisee_lidar) StderrLine: {'line': b'  844 |             std::is_same_v<T, ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.798533] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.798569] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:845:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.798606] (kruisee_lidar) StderrLine: {'line': b'  845 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.798641] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.798676] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:850:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.798713] (kruisee_lidar) StderrLine: {'line': b'  850 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoCallback>||\n'}
[0.798748] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.798783] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.798818] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:850:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.798853] (kruisee_lidar) StderrLine: {'line': b'  850 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoCallback>||\n'}
[0.798896] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.798931] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:850:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.798968] (kruisee_lidar) StderrLine: {'line': b'  850 |             std::is_same_v<T, SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.799001] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.799037] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:850:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.799072] (kruisee_lidar) StderrLine: {'line': b'  850 |             std::is_same_v<T, SharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.799107] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.799141] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:851:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.799180] (kruisee_lidar) StderrLine: {'line': b'  851 |             std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoCallback>\n'}
[0.799215] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.799249] (kruisee_lidar) StderrLine: {'line': b'      |                  \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.799284] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:851:29:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.799319] (kruisee_lidar) StderrLine: {'line': b'  851 |             std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoCallback>\n'}
[0.799354] (kruisee_lidar) StderrLine: {'line': b'      |                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.799388] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:851:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.799423] (kruisee_lidar) StderrLine: {'line': b'  851 |             std::is_same_v<T, ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K\n'}
[0.799457] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.799491] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:852:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.799526] (kruisee_lidar) StderrLine: {'line': b'  852 |         \x1b[01;31m\x1b[K)\x1b[m\x1b[K)\n'}
[0.799560] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.799594] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:857:33:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.799629] (kruisee_lidar) StderrLine: {'line': b'  857 |         else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.799664] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.799699] (kruisee_lidar) StderrLine: {'line': b'      |                                 \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.799733] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:857:44:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.799768] (kruisee_lidar) StderrLine: {'line': b'  857 |         else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.799803] (kruisee_lidar) StderrLine: {'line': b'      |                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.799837] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:857:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.799872] (kruisee_lidar) StderrLine: {'line': b'  857 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT[readability/braces]\n'}
[0.799909] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.799944] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:857:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.799980] (kruisee_lidar) StderrLine: {'line': b'  857 |         else if constexpr (std::is_same_v<T, ConstRefROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT[readability/braces]\n'}
[0.800015] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.800051] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:864:35:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.800089] (kruisee_lidar) StderrLine: {'line': b'  864 |         } else if constexpr (std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefWithInfoROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.800124] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.800157] (kruisee_lidar) StderrLine: {'line': b'      |                                   \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.800191] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:864:46:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.800226] (kruisee_lidar) StderrLine: {'line': b'  864 |         } else if constexpr (std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefWithInfoROSMessageCallback>) {  // NOLINT[readability/braces]\n'}
[0.800260] (kruisee_lidar) StderrLine: {'line': b'      |                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.800295] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:864:82:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.800330] (kruisee_lidar) StderrLine: {'line': b'  864 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K) {  // NOLINT[readability/braces]\n'}
[0.800366] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                  \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.800401] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:864:83:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.800436] (kruisee_lidar) StderrLine: {'line': b'  864 |         } else if constexpr (std::is_same_v<T, ConstRefWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K {  // NOLINT[readability/braces]\n'}
[0.800471] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.800506] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:872:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.800541] (-) TimerEvent: {}
[0.800622] (kruisee_lidar) StderrLine: {'line': b'  872 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrROSMessageCallback>||\n'}
[0.800668] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.800705] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.800740] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:872:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.800775] (kruisee_lidar) StderrLine: {'line': b'  872 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrROSMessageCallback>||\n'}
[0.800814] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.800850] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:872:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.800885] (kruisee_lidar) StderrLine: {'line': b'  872 |           std::is_same_v<T, UniquePtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.800919] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.800953] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:872:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.800988] (kruisee_lidar) StderrLine: {'line': b'  872 |           std::is_same_v<T, UniquePtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.801023] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.801058] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:873:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.801093] (kruisee_lidar) StderrLine: {'line': b'  873 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrROSMessageCallback>)\n'}
[0.801136] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.801171] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.801208] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:873:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.801243] (kruisee_lidar) StderrLine: {'line': b'  873 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrROSMessageCallback>)\n'}
[0.801278] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.801313] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:873:56:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.801350] (kruisee_lidar) StderrLine: {'line': b'  873 |           std::is_same_v<T, SharedPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.801384] (kruisee_lidar) StderrLine: {'line': b'      |                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.801418] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:873:57:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.801453] (kruisee_lidar) StderrLine: {'line': b'  873 |           std::is_same_v<T, SharedPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.801487] (kruisee_lidar) StderrLine: {'line': b'      |                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.801522] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:881:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.801559] (kruisee_lidar) StderrLine: {'line': b'  881 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrWithInfoROSMessageCallback>||\n'}
[0.801594] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.801628] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.801662] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:881:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.801697] (kruisee_lidar) StderrLine: {'line': b'  881 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrWithInfoROSMessageCallback>||\n'}
[0.801730] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.801764] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:881:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.801799] (kruisee_lidar) StderrLine: {'line': b'  881 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.801833] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.801867] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:881:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.801901] (kruisee_lidar) StderrLine: {'line': b'  881 |           std::is_same_v<T, UniquePtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.801936] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.801970] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:882:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.802006] (kruisee_lidar) StderrLine: {'line': b'  882 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrWithInfoROSMessageCallback>)\n'}
[0.802041] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.802076] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.802110] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:882:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.802145] (kruisee_lidar) StderrLine: {'line': b'  882 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrWithInfoROSMessageCallback>)\n'}
[0.802180] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.802214] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:882:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.802249] (kruisee_lidar) StderrLine: {'line': b'  882 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.802285] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.802320] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:882:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.802354] (kruisee_lidar) StderrLine: {'line': b'  882 |           std::is_same_v<T, SharedPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.802389] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.802423] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:890:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.802463] (kruisee_lidar) StderrLine: {'line': b'  890 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrROSMessageCallback>||\n'}
[0.802499] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.802534] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.802568] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:890:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.802605] (kruisee_lidar) StderrLine: {'line': b'  890 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrROSMessageCallback>||\n'}
[0.802640] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.802674] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:890:61:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.802709] (kruisee_lidar) StderrLine: {'line': b'  890 |           std::is_same_v<T, SharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.802743] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.802782] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:890:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.802819] (kruisee_lidar) StderrLine: {'line': b'  890 |           std::is_same_v<T, SharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.802853] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.802896] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:891:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.802942] (kruisee_lidar) StderrLine: {'line': b'  891 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrROSMessageCallback>)\n'}
[0.802977] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.803012] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.803049] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:891:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.803084] (kruisee_lidar) StderrLine: {'line': b'  891 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrROSMessageCallback>)\n'}
[0.803119] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.803152] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:891:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.803187] (kruisee_lidar) StderrLine: {'line': b'  891 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.803221] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.803256] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:891:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.803291] (kruisee_lidar) StderrLine: {'line': b'  891 |           std::is_same_v<T, ConstRefSharedConstPtrROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.803325] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.803360] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:899:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.803396] (kruisee_lidar) StderrLine: {'line': b'  899 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.803431] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.803465] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.803500] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:899:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.803536] (kruisee_lidar) StderrLine: {'line': b'  899 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrWithInfoROSMessageCallback>||\n'}
[0.803571] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.803604] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:899:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.803639] (kruisee_lidar) StderrLine: {'line': b'  899 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.803674] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.803710] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:899:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.803745] (kruisee_lidar) StderrLine: {'line': b'  899 |           std::is_same_v<T, SharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.803783] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.803817] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:900:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.803854] (kruisee_lidar) StderrLine: {'line': b'  900 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>)\n'}
[0.803889] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.803923] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.803958] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:900:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.803993] (kruisee_lidar) StderrLine: {'line': b'  900 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrWithInfoROSMessageCallback>)\n'}
[0.804028] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.804062] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:900:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.804098] (kruisee_lidar) StderrLine: {'line': b'  900 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.804133] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.804168] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:900:78:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.804203] (kruisee_lidar) StderrLine: {'line': b'  900 |           std::is_same_v<T, ConstRefSharedConstPtrWithInfoROSMessageCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.804237] (kruisee_lidar) StderrLine: {'line': b'      |                                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.804272] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:910:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.804307] (kruisee_lidar) StderrLine: {'line': b'  910 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageCallback>||\n'}
[0.804342] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.804389] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.804423] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:910:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.804457] (kruisee_lidar) StderrLine: {'line': b'  910 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageCallback>||\n'}
[0.804494] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.804528] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:910:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.804563] (kruisee_lidar) StderrLine: {'line': b'  910 |           std::is_same_v<T, ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.804597] (kruisee_lidar) StderrLine: {'line': b'      |                                                              \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.804631] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:910:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.804667] (kruisee_lidar) StderrLine: {'line': b'  910 |           std::is_same_v<T, ConstRefSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.804701] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.804735] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:911:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.804771] (kruisee_lidar) StderrLine: {'line': b'  911 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.804805] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.804839] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.804873] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:911:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.804910] (kruisee_lidar) StderrLine: {'line': b'  911 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSerializedMessageWithInfoCallback>||\n'}
[0.804945] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.804979] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:911:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.805014] (kruisee_lidar) StderrLine: {'line': b'  911 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.805050] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.805084] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:911:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.805124] (kruisee_lidar) StderrLine: {'line': b'  911 |           std::is_same_v<T, ConstRefSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.805158] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.805191] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:912:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.805229] (kruisee_lidar) StderrLine: {'line': b'  912 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageCallback>||\n'}
[0.805263] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.805297] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.805332] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:912:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.805366] (kruisee_lidar) StderrLine: {'line': b'  912 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageCallback>||\n'}
[0.805401] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.805435] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:912:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.805470] (kruisee_lidar) StderrLine: {'line': b'  912 |           std::is_same_v<T, UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.805505] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.805539] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:912:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.805574] (kruisee_lidar) StderrLine: {'line': b'  912 |           std::is_same_v<T, UniquePtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.805609] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.805643] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:913:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.805679] (kruisee_lidar) StderrLine: {'line': b'  913 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.805715] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.805750] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.805786] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:913:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.805821] (kruisee_lidar) StderrLine: {'line': b'  913 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K UniquePtrSerializedMessageWithInfoCallback>||\n'}
[0.805856] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.805891] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:913:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.805925] (kruisee_lidar) StderrLine: {'line': b'  913 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.805961] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.805995] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:913:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.806033] (kruisee_lidar) StderrLine: {'line': b'  913 |           std::is_same_v<T, UniquePtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.806069] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.806103] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:914:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.806139] (kruisee_lidar) StderrLine: {'line': b'  914 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageCallback>||\n'}
[0.806173] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.806208] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.806242] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:914:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.806277] (kruisee_lidar) StderrLine: {'line': b'  914 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageCallback>||\n'}
[0.806314] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.806348] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:914:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.806385] (kruisee_lidar) StderrLine: {'line': b'  914 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.806418] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.806453] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:914:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.806488] (kruisee_lidar) StderrLine: {'line': b'  914 |           std::is_same_v<T, SharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.806522] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.806556] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:915:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.806592] (kruisee_lidar) StderrLine: {'line': b'  915 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.806627] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.806663] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.806698] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:915:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.806743] (kruisee_lidar) StderrLine: {'line': b'  915 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.806793] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.806830] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:915:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.806873] (kruisee_lidar) StderrLine: {'line': b'  915 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.806914] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.806950] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:915:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.806984] (kruisee_lidar) StderrLine: {'line': b'  915 |           std::is_same_v<T, SharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.807029] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.807068] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:916:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.807105] (kruisee_lidar) StderrLine: {'line': b'  916 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.807146] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.807190] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.807226] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:916:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.807277] (kruisee_lidar) StderrLine: {'line': b'  916 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageCallback>||\n'}
[0.807314] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.807350] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:916:76:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.807385] (kruisee_lidar) StderrLine: {'line': b'  916 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.807420] (kruisee_lidar) StderrLine: {'line': b'      |                                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.807455] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:916:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.807492] (kruisee_lidar) StderrLine: {'line': b'  916 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.807527] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.807562] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:917:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.807601] (kruisee_lidar) StderrLine: {'line': b'  917 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.807636] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.807670] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.807705] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:917:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.807743] (kruisee_lidar) StderrLine: {'line': b'  917 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K ConstRefSharedConstPtrSerializedMessageWithInfoCallback>||\n'}
[0.807778] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.807813] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:917:84:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.807848] (kruisee_lidar) StderrLine: {'line': b'  917 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.807882] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.807916] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:917:85:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.807952] (kruisee_lidar) StderrLine: {'line': b'  917 |           std::is_same_v<T, ConstRefSharedConstPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.807987] (kruisee_lidar) StderrLine: {'line': b'      |                                                                                     \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.808022] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:918:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.808057] (kruisee_lidar) StderrLine: {'line': b'  918 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageCallback>||\n'}
[0.808092] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.808127] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.808161] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:918:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.808199] (kruisee_lidar) StderrLine: {'line': b'  918 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageCallback>||\n'}
[0.808234] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.808269] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:918:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.808304] (kruisee_lidar) StderrLine: {'line': b'  918 |           std::is_same_v<T, SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K||\n'}
[0.808338] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.808373] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:918:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K||\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.808410] (kruisee_lidar) StderrLine: {'line': b'  918 |           std::is_same_v<T, SharedPtrSerializedMessageCallback>\x1b[01;31m\x1b[K||\x1b[m\x1b[K\n'}
[0.808444] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^~\x1b[m\x1b[K\n'}
[0.808477] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:919:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.808513] (kruisee_lidar) StderrLine: {'line': b'  919 |           std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<T, SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.808548] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.808582] (kruisee_lidar) StderrLine: {'line': b'      |                \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.808617] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:919:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.808652] (kruisee_lidar) StderrLine: {'line': b'  919 |           std::is_same_v<T\x1b[01;31m\x1b[K,\x1b[m\x1b[K SharedPtrSerializedMessageWithInfoCallback>)\n'}
[0.808687] (kruisee_lidar) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.808721] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:919:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.808757] (kruisee_lidar) StderrLine: {'line': b'  919 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K)\n'}
[0.808791] (kruisee_lidar) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.808826] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:919:72:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K)\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.808863] (kruisee_lidar) StderrLine: {'line': b'  919 |           std::is_same_v<T, SharedPtrSerializedMessageWithInfoCallback>\x1b[01;31m\x1b[K)\x1b[m\x1b[K\n'}
[0.808899] (kruisee_lidar) StderrLine: {'line': b'      |                                                                        \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.808935] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::use_take_shared_method() const\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.808973] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:938:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.809010] (kruisee_lidar) StderrLine: {'line': b'  938 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedConstPtrCallback>(callback_variant_) ||\n'}
[0.809045] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.809079] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:938:52:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.809115] (kruisee_lidar) StderrLine: {'line': b'  938 |       std::holds_alternative<SharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.809151] (kruisee_lidar) StderrLine: {'line': b'      |                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.809186] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:939:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.809221] (kruisee_lidar) StderrLine: {'line': b'  939 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedConstPtrWithInfoCallback>(callback_variant_) ||\n'}
[0.809255] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.809290] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:939:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.809325] (kruisee_lidar) StderrLine: {'line': b'  939 |       std::holds_alternative<SharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.809361] (kruisee_lidar) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.809395] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:940:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.809431] (kruisee_lidar) StderrLine: {'line': b'  940 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<ConstRefSharedConstPtrCallback>(callback_variant_) ||\n'}
[0.809466] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.809500] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:940:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.809537] (kruisee_lidar) StderrLine: {'line': b'  940 |       std::holds_alternative<ConstRefSharedConstPtrCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.809573] (kruisee_lidar) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.809606] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:941:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.809643] (kruisee_lidar) StderrLine: {'line': b'  941 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<ConstRefSharedConstPtrWithInfoCallback>(callback_variant_);\n'}
[0.809679] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.809714] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:941:68:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.809749] (kruisee_lidar) StderrLine: {'line': b'  941 |       std::holds_alternative<ConstRefSharedConstPtrWithInfoCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_);\n'}
[0.809784] (kruisee_lidar) StderrLine: {'line': b'      |                                                                    \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.809819] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::is_serialized_message_callback() const\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.809854] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:949:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.809889] (kruisee_lidar) StderrLine: {'line': b'  949 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<ConstRefSerializedMessageCallback>(callback_variant_) ||\n'}
[0.809924] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.809958] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:949:63:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.809996] (kruisee_lidar) StderrLine: {'line': b'  949 |       std::holds_alternative<ConstRefSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.810031] (kruisee_lidar) StderrLine: {'line': b'      |                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.810065] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:950:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.810102] (kruisee_lidar) StderrLine: {'line': b'  950 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<UniquePtrSerializedMessageCallback>(callback_variant_) ||\n'}
[0.810137] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.810171] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:950:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.810206] (kruisee_lidar) StderrLine: {'line': b'  950 |       std::holds_alternative<UniquePtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.810240] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.810274] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:951:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.810384] (kruisee_lidar) StderrLine: {'line': b'  951 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedConstPtrSerializedMessageCallback>(callback_variant_) ||\n'}
[0.810419] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.810453] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:951:69:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.810488] (kruisee_lidar) StderrLine: {'line': b'  951 |       std::holds_alternative<SharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.810521] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.810555] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:952:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.810589] (kruisee_lidar) StderrLine: {'line': b'  952 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<ConstRefSharedConstPtrSerializedMessageCallback>(callback_variant_) ||\n'}
[0.810622] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.810657] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:952:77:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.810692] (kruisee_lidar) StderrLine: {'line': b'  952 |       std::holds_alternative<ConstRefSharedConstPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_) ||\n'}
[0.810725] (kruisee_lidar) StderrLine: {'line': b'      |                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.810759] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:953:12:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kholds_alternative\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.810793] (kruisee_lidar) StderrLine: {'line': b'  953 |       std::\x1b[01;31m\x1b[Kholds_alternative\x1b[m\x1b[K<SharedPtrSerializedMessageCallback>(callback_variant_);\n'}
[0.810827] (kruisee_lidar) StderrLine: {'line': b'      |            \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.810867] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:953:64:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.810908] (kruisee_lidar) StderrLine: {'line': b'  953 |       std::holds_alternative<SharedPtrSerializedMessageCallback\x1b[01;31m\x1b[K>\x1b[m\x1b[K(callback_variant_);\n'}
[0.810942] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.810977] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::register_callback_for_tracing()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[0.811013] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:960:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvisit\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99\n'}
[0.811051] (kruisee_lidar) StderrLine: {'line': b'  960 |     std::\x1b[01;31m\x1b[Kvisit\x1b[m\x1b[K(\n'}
[0.811097] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[0.811145] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:960:10:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::visit\x1b[m\x1b[K\xe2\x80\x99 is only available from C++17 onwards\n'}
[0.865443] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:45\x1b[m\x1b[K,\n'}
[0.865594] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[0.865645] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.865680] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.865715] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.865751] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.865786] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.865821] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.865855] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.865889] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/main.cc:9\x1b[m\x1b[K:\n'}
[0.865923] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_options.hpp:\x1b[m\x1b[K At global scope:\n'}
[0.865957] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_options.hpp:94:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_void_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_void\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.865994] (kruisee_lidar) StderrLine: {'line': b'   94 |     std::\x1b[01;31m\x1b[Kis_void_v\x1b[m\x1b[K<typename std::allocator_traits<Allocator>::value_type>,\n'}
[0.866029] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.866062] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[32m\x1b[Kis_void\x1b[m\x1b[K\n'}
[0.866096] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_options.hpp:94:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K(\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.866131] (kruisee_lidar) StderrLine: {'line': b'   94 |     std::is_void_v<typename std::allocator_traits<Allocator>::value_type\x1b[01;31m\x1b[K>\x1b[m\x1b[K,\n'}
[0.866166] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.866199] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[32m\x1b[K(\x1b[m\x1b[K\n'}
[0.866235] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_options.hpp:94:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.866271] (kruisee_lidar) StderrLine: {'line': b'   94 |     std::is_void_v<typename std::allocator_traits<Allocator>::value_type>\x1b[01;31m\x1b[K,\x1b[m\x1b[K\n'}
[0.866305] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.875071] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:45\x1b[m\x1b[K,\n'}
[0.875317] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[0.875374] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.875430] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.875482] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.875536] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.875587] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.875639] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.875690] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.875742] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:11\x1b[m\x1b[K,\n'}
[0.875794] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:9\x1b[m\x1b[K:\n'}
[0.875832] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_options.hpp:\x1b[m\x1b[K At global scope:\n'}
[0.875869] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_options.hpp:94:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_void_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_void\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.875930] (kruisee_lidar) StderrLine: {'line': b'   94 |     std::\x1b[01;31m\x1b[Kis_void_v\x1b[m\x1b[K<typename std::allocator_traits<Allocator>::value_type>,\n'}
[0.875983] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.876027] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[32m\x1b[Kis_void\x1b[m\x1b[K\n'}
[0.876062] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_options.hpp:94:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K(\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.876098] (kruisee_lidar) StderrLine: {'line': b'   94 |     std::is_void_v<typename std::allocator_traits<Allocator>::value_type\x1b[01;31m\x1b[K>\x1b[m\x1b[K,\n'}
[0.876134] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.876179] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[32m\x1b[K(\x1b[m\x1b[K\n'}
[0.876215] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_options.hpp:94:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.876254] (kruisee_lidar) StderrLine: {'line': b'   94 |     std::is_void_v<typename std::allocator_traits<Allocator>::value_type>\x1b[01;31m\x1b[K,\x1b[m\x1b[K\n'}
[0.876290] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.892955] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/publisher.hpp:42\x1b[m\x1b[K,\n'}
[0.893106] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/topic_statistics/subscription_topic_statistics.hpp:31\x1b[m\x1b[K,\n'}
[0.893150] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:50\x1b[m\x1b[K,\n'}
[0.893187] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[0.893228] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.893266] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.893301] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.893335] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.893369] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.893404] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.893447] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.893481] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/main.cc:9\x1b[m\x1b[K:\n'}
[0.893517] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/publisher_options.hpp:69:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_void_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_void\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.893553] (kruisee_lidar) StderrLine: {'line': b'   69 |     std::\x1b[01;31m\x1b[Kis_void_v\x1b[m\x1b[K<typename std::allocator_traits<Allocator>::value_type>,\n'}
[0.893588] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.893632] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[32m\x1b[Kis_void\x1b[m\x1b[K\n'}
[0.893665] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/publisher_options.hpp:69:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K(\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.893701] (kruisee_lidar) StderrLine: {'line': b'   69 |     std::is_void_v<typename std::allocator_traits<Allocator>::value_type\x1b[01;31m\x1b[K>\x1b[m\x1b[K,\n'}
[0.893735] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.893771] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[32m\x1b[K(\x1b[m\x1b[K\n'}
[0.893805] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/publisher_options.hpp:69:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.893839] (kruisee_lidar) StderrLine: {'line': b'   69 |     std::is_void_v<typename std::allocator_traits<Allocator>::value_type>\x1b[01;31m\x1b[K,\x1b[m\x1b[K\n'}
[0.893873] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.900630] (-) TimerEvent: {}
[0.903207] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/publisher.hpp:42\x1b[m\x1b[K,\n'}
[0.903332] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/topic_statistics/subscription_topic_statistics.hpp:31\x1b[m\x1b[K,\n'}
[0.903378] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:50\x1b[m\x1b[K,\n'}
[0.903416] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[0.903467] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.903502] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.903537] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.903572] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.903606] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.903641] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.903676] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.903711] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:11\x1b[m\x1b[K,\n'}
[0.903753] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:9\x1b[m\x1b[K:\n'}
[0.903789] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/publisher_options.hpp:69:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_void_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_void\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.903828] (kruisee_lidar) StderrLine: {'line': b'   69 |     std::\x1b[01;31m\x1b[Kis_void_v\x1b[m\x1b[K<typename std::allocator_traits<Allocator>::value_type>,\n'}
[0.903864] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.903905] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[32m\x1b[Kis_void\x1b[m\x1b[K\n'}
[0.903956] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/publisher_options.hpp:69:73:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected \xe2\x80\x98\x1b[01m\x1b[K(\x1b[m\x1b[K\xe2\x80\x99 before \xe2\x80\x98\x1b[01m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.903995] (kruisee_lidar) StderrLine: {'line': b'   69 |     std::is_void_v<typename std::allocator_traits<Allocator>::value_type\x1b[01;31m\x1b[K>\x1b[m\x1b[K,\n'}
[0.904037] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.904071] (kruisee_lidar) StderrLine: {'line': b'      |                                                                         \x1b[32m\x1b[K(\x1b[m\x1b[K\n'}
[0.904105] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/publisher_options.hpp:69:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected primary-expression before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.904295] (kruisee_lidar) StderrLine: {'line': b'   69 |     std::is_void_v<typename std::allocator_traits<Allocator>::value_type>\x1b[01;31m\x1b[K,\x1b[m\x1b[K\n'}
[0.904365] (kruisee_lidar) StderrLine: {'line': b'      |                                                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.904404] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[0.904441] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.904477] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.904512] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.904547] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.904582] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.904617] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.904651] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.904686] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/main.cc:9\x1b[m\x1b[K:\n'}
[0.904727] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:295:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.904783] (kruisee_lidar) StderrLine: {'line': b'  295 |     std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<TakeT, SubscribedType>,\n'}
[0.904836] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.904887] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.904939] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:293:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kparse error in template argument list\n'}
[0.904993] (kruisee_lidar) StderrLine: {'line': b'  293 |   std::\x1b[01;31m\x1b[Kenable_if_t<\x1b[m\x1b[K\n'}
[0.905048] (kruisee_lidar) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.905101] (kruisee_lidar) StderrLine: {'line': b'  294 | \x1b[01;31m\x1b[K    !rosidl_generator_traits::is_message<TakeT>::value &&\x1b[m\x1b[K\n'}
[0.905147] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.905203] (kruisee_lidar) StderrLine: {'line': b'  295 | \x1b[01;31m\x1b[K    std::is_same_v<TakeT, SubscribedType>\x1b[m\x1b[K,\n'}
[0.905266] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.905307] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:295:42:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected unqualified-id before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.905346] (kruisee_lidar) StderrLine: {'line': b'  295 |     std::is_same_v<TakeT, SubscribedType>\x1b[01;31m\x1b[K,\x1b[m\x1b[K\n'}
[0.905393] (kruisee_lidar) StderrLine: {'line': b'      |                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[0.916068] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[0.916256] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[0.916298] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[0.916335] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[0.916371] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[0.916405] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[0.916441] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[0.916485] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[0.916520] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:11\x1b[m\x1b[K,\n'}
[0.916556] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:9\x1b[m\x1b[K:\n'}
[0.916594] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:295:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kis_same_v\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kstd\x1b[m\x1b[K\xe2\x80\x99; did you mean \xe2\x80\x98\x1b[01m\x1b[Kis_same\x1b[m\x1b[K\xe2\x80\x99?\n'}
[0.916634] (kruisee_lidar) StderrLine: {'line': b'  295 |     std::\x1b[01;31m\x1b[Kis_same_v\x1b[m\x1b[K<TakeT, SubscribedType>,\n'}
[0.916670] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[0.916712] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[32m\x1b[Kis_same\x1b[m\x1b[K\n'}
[0.916763] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:293:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kparse error in template argument list\n'}
[0.916822] (kruisee_lidar) StderrLine: {'line': b'  293 |   std::\x1b[01;31m\x1b[Kenable_if_t<\x1b[m\x1b[K\n'}
[0.916873] (kruisee_lidar) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.916924] (kruisee_lidar) StderrLine: {'line': b'  294 | \x1b[01;31m\x1b[K    !rosidl_generator_traits::is_message<TakeT>::value &&\x1b[m\x1b[K\n'}
[0.916975] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.917025] (kruisee_lidar) StderrLine: {'line': b'  295 | \x1b[01;31m\x1b[K    std::is_same_v<TakeT, SubscribedType>\x1b[m\x1b[K,\n'}
[0.917082] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.917139] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:295:42:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kexpected unqualified-id before \xe2\x80\x98\x1b[01m\x1b[K,\x1b[m\x1b[K\xe2\x80\x99 token\n'}
[0.917198] (kruisee_lidar) StderrLine: {'line': b'  295 |     std::is_same_v<TakeT, SubscribedType>\x1b[01;31m\x1b[K,\x1b[m\x1b[K\n'}
[0.917255] (kruisee_lidar) StderrLine: {'line': b'      |                                          \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[1.000803] (-) TimerEvent: {}
[1.101139] (-) TimerEvent: {}
[1.119615] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[1.119795] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[1.119856] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[1.119892] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[1.119928] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[1.119977] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[1.120012] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[1.120046] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[1.120086] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[1.120118] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[1.120152] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/main.cc:9\x1b[m\x1b[K:\n'}
[1.120187] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::AnySubscriptionCallback<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.120222] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:423:49:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::Subscription<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.120259] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/parameter_client.hpp:208:69:\x1b[m\x1b[K   required from here\n'}
[1.120293] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:971:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.120332] (kruisee_lidar) StderrLine: {'line': b'  971 |   \x1b[01;31m\x1b[Kget_variant\x1b[m\x1b[K()\n'}
[1.120366] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.120401] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:977:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.120445] (kruisee_lidar) StderrLine: {'line': b'  977 |   \x1b[01;31m\x1b[Kget_variant\x1b[m\x1b[K() const\n'}
[1.120478] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.120523] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:987:34:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.120562] (kruisee_lidar) StderrLine: {'line': b'  987 |   typename HelperT::variant_type \x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K;\n'}
[1.120598] (kruisee_lidar) StderrLine: {'line': b'      |                                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.130906] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[1.131085] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[1.131138] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[1.131174] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[1.131210] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[1.131243] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[1.131277] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[1.131312] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[1.131347] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[1.131381] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[1.131417] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:11\x1b[m\x1b[K,\n'}
[1.131452] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:9\x1b[m\x1b[K:\n'}
[1.131487] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::AnySubscriptionCallback<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.131534] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:423:49:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::Subscription<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.131572] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/parameter_client.hpp:208:69:\x1b[m\x1b[K   required from here\n'}
[1.131606] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:971:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.131648] (kruisee_lidar) StderrLine: {'line': b'  971 |   \x1b[01;31m\x1b[Kget_variant\x1b[m\x1b[K()\n'}
[1.131682] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.131716] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:977:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.131751] (kruisee_lidar) StderrLine: {'line': b'  977 |   \x1b[01;31m\x1b[Kget_variant\x1b[m\x1b[K() const\n'}
[1.131785] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.131818] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:987:34:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<rcl_interfaces::msg::ParameterEvent_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.131854] (kruisee_lidar) StderrLine: {'line': b'  987 |   typename HelperT::variant_type \x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K;\n'}
[1.131888] (kruisee_lidar) StderrLine: {'line': b'      |                                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.201294] (-) TimerEvent: {}
[1.262178] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.262333] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:423:49:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.262395] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:63:48:\x1b[m\x1b[K   required from here\n'}
[1.262433] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:971:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.262508] (kruisee_lidar) StderrLine: {'line': b'  971 |   \x1b[01;31m\x1b[Kget_variant\x1b[m\x1b[K()\n'}
[1.262551] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.262593] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:977:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.262647] (kruisee_lidar) StderrLine: {'line': b'  977 |   \x1b[01;31m\x1b[Kget_variant\x1b[m\x1b[K() const\n'}
[1.262693] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.262731] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:987:34:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.262780] (kruisee_lidar) StderrLine: {'line': b'  987 |   typename HelperT::variant_type \x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K;\n'}
[1.262816] (kruisee_lidar) StderrLine: {'line': b'      |                                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.266750] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:9\x1b[m\x1b[K:\n'}
[1.266855] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KNode::Node(const string&, bool)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.266917] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:72:10:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KNode::is_scan_\x1b[m\x1b[K\xe2\x80\x99 will be initialized after [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreorder\x07-Wreorder\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[1.266957] (kruisee_lidar) StderrLine: {'line': b'   72 |     bool \x1b[01;35m\x1b[Kis_scan_\x1b[m\x1b[K;\n'}
[1.266993] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;35m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[1.267027] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:65:10:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kbool Node::ctl_run_\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreorder\x07-Wreorder\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[1.267063] (kruisee_lidar) StderrLine: {'line': b'   65 |     bool \x1b[01;35m\x1b[Kctl_run_\x1b[m\x1b[K;\n'}
[1.267097] (kruisee_lidar) StderrLine: {'line': b'      |          \x1b[01;35m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[1.267131] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:23:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[K  when initialized here [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreorder\x07-Wreorder\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[1.267166] (kruisee_lidar) StderrLine: {'line': b'   23 | \x1b[01;35m\x1b[KNode\x1b[m\x1b[K::Node(const std::string &frame_id, bool is_scan)\n'}
[1.267201] (kruisee_lidar) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^~~~\x1b[m\x1b[K\n'}
[1.275498] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.275650] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:423:49:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.275694] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:63:48:\x1b[m\x1b[K   required from here\n'}
[1.275731] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:971:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.275780] (kruisee_lidar) StderrLine: {'line': b'  971 |   \x1b[01;31m\x1b[Kget_variant\x1b[m\x1b[K()\n'}
[1.275814] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.275849] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:977:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.275886] (kruisee_lidar) StderrLine: {'line': b'  977 |   \x1b[01;31m\x1b[Kget_variant\x1b[m\x1b[K() const\n'}
[1.275919] (kruisee_lidar) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.275952] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:987:34:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Kvariant_type\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct rclcpp::detail::AnySubscriptionCallbackHelper<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void>, false>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.275988] (kruisee_lidar) StderrLine: {'line': b'  987 |   typename HelperT::variant_type \x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K;\n'}
[1.276024] (kruisee_lidar) StderrLine: {'line': b'      |                                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.301459] (-) TimerEvent: {}
[1.401798] (-) TimerEvent: {}
[1.502060] (-) TimerEvent: {}
[1.602310] (-) TimerEvent: {}
[1.702585] (-) TimerEvent: {}
[1.800022] (kruisee_lidar) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[1.800179] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[1.800221] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[1.800265] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[1.800300] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[1.800334] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[1.800368] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[1.800403] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[1.800438] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[1.800472] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[1.800507] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/include/node.h:11\x1b[m\x1b[K,\n'}
[1.800541] (kruisee_lidar) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:9\x1b[m\x1b[K:\n'}
[1.800575] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set_deprecated(std::function<void(std::shared_ptr<_Yp>)>) [with SetT = std_msgs::msg::String_<std::allocator<void> >; MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.800617] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:391:21:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.800661] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.800704] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.800749] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.800790] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.800830] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:70:79:\x1b[m\x1b[K   required from here\n'}
[1.800867] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:410:5:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.800906] (kruisee_lidar) StderrLine: {'line': b'  410 |     \x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K = callback;\n'}
[1.800942] (kruisee_lidar) StderrLine: {'line': b'      |     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.802672] (-) TimerEvent: {}
[1.812668] (kruisee_lidar) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/kruisee_lidar_node.dir/build.make:76: CMakeFiles/kruisee_lidar_node.dir/top/main.cc.o] Error 1\n'}
[1.812806] (kruisee_lidar) StderrLine: {'line': b'gmake[2]: *** Waiting for unfinished jobs....\n'}
[1.902789] (-) TimerEvent: {}
[1.973445] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::is_serialized_message_callback() const [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.973841] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:144:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::Subscription(rclcpp::node_interfaces::NodeBaseInterface*, const rosidl_message_type_support_t&, const string&, const rclcpp::QoS&, rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>; SubscribedT = std_msgs::msg::String_<std::allocator<void> >; ROSMessageT = std_msgs::msg::String_<std::allocator<void> >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; rosidl_message_type_support_t = rosidl_message_type_support_t; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >; rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr = std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.973927] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:162:4:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >&}; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.973991] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/alloc_traits.h:516:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >&}; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974040] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:519:39:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_Sp_counted_ptr_inplace(_Alloc, _Args&& ...) [with _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >&}; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; _Alloc = std::allocator<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974103] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:650:16:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::__shared_count<_Lp>::__shared_count(_Tp*&, std::_Sp_alloc_shared_tag<_Alloc>, _Args&& ...) [with _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; _Alloc = std::allocator<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >&}; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974165] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:1342:14:\x1b[m\x1b[K   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[1.974218] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:110:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic std::shared_ptr<rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT> > rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::make_shared(Args&& ...) [with Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >&}; MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>; SubscribedT = std_msgs::msg::String_<std::allocator<void> >; ROSMessageT = std_msgs::msg::String_<std::allocator<void> >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974262] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:107:65:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974305] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974354] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974398] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974437] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:70:79:\x1b[m\x1b[K   required from here\n'}
[1.974472] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:949:65:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974512] (kruisee_lidar) StderrLine: {'line': b'  949 |       std::holds_alternative<ConstRefSerializedMessageCallback>\x1b[01;31m\x1b[K(callback_variant_)\x1b[m\x1b[K ||\n'}
[1.974548] (kruisee_lidar) StderrLine: {'line': b'      |                                                                \x1b[01;31m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.974584] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:950:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974621] (kruisee_lidar) StderrLine: {'line': b'  950 |       std::holds_alternative<UniquePtrSerializedMessageCallback>\x1b[01;31m\x1b[K(callback_variant_)\x1b[m\x1b[K ||\n'}
[1.974661] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.974697] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:951:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974735] (kruisee_lidar) StderrLine: {'line': b'  951 |       std::holds_alternative<SharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K(callback_variant_)\x1b[m\x1b[K ||\n'}
[1.974781] (kruisee_lidar) StderrLine: {'line': b'      |                                                                      \x1b[01;31m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.974840] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:952:79:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.974892] (kruisee_lidar) StderrLine: {'line': b'  952 |       std::holds_alternative<ConstRefSharedConstPtrSerializedMessageCallback>\x1b[01;31m\x1b[K(callback_variant_)\x1b[m\x1b[K ||\n'}
[1.974929] (kruisee_lidar) StderrLine: {'line': b'      |                                                                              \x1b[01;31m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.974971] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:953:66:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.975009] (kruisee_lidar) StderrLine: {'line': b'  953 |       std::holds_alternative<SharedPtrSerializedMessageCallback>\x1b[01;31m\x1b[K(callback_variant_)\x1b[m\x1b[K;\n'}
[1.975047] (kruisee_lidar) StderrLine: {'line': b'      |                                                                 \x1b[01;31m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.002895] (-) TimerEvent: {}
[2.036881] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::use_take_shared_method() const [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.037096] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/detail/resolve_intra_process_buffer_type.hpp:40:57:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::IntraProcessBufferType rclcpp::detail::resolve_intra_process_buffer_type(rclcpp::IntraProcessBufferType, const rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>&) [with CallbackMessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037149] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:216:42:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::Subscription(rclcpp::node_interfaces::NodeBaseInterface*, const rosidl_message_type_support_t&, const string&, const rclcpp::QoS&, rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>; SubscribedT = std_msgs::msg::String_<std::allocator<void> >; ROSMessageT = std_msgs::msg::String_<std::allocator<void> >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; rosidl_message_type_support_t = rosidl_message_type_support_t; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >; rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr = std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037262] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:162:4:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >&}; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037333] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/alloc_traits.h:516:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >&}; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037391] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:519:39:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_Sp_counted_ptr_inplace(_Alloc, _Args&& ...) [with _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >&}; _Tp = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; _Alloc = std::allocator<rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > > >; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037448] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:650:16:\x1b[m\x1b[K   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[2.037498] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:110:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic std::shared_ptr<rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT> > rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::make_shared(Args&& ...) [with Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<std_msgs::msg::String_<std::allocator<void> > > >&}; MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>; SubscribedT = std_msgs::msg::String_<std::allocator<void> >; ROSMessageT = std_msgs::msg::String_<std::allocator<void> >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037541] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:107:65:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037583] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037623] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037661] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; CallbackT = std::_Bind<void (Node::*(Node*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::String_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037703] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/home/pz10on/Work/ws02_tools/src/kruisee_lidar/top/node.cc:70:79:\x1b[m\x1b[K   required from here\n'}
[2.037738] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:938:54:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037773] (kruisee_lidar) StderrLine: {'line': b'  938 |       std::holds_alternative<SharedConstPtrCallback>\x1b[01;31m\x1b[K(callback_variant_)\x1b[m\x1b[K ||\n'}
[2.037810] (kruisee_lidar) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.037843] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:939:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037876] (kruisee_lidar) StderrLine: {'line': b'  939 |       std::holds_alternative<SharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K(callback_variant_)\x1b[m\x1b[K ||\n'}
[2.037911] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.037947] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:940:62:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.037987] (kruisee_lidar) StderrLine: {'line': b'  940 |       std::holds_alternative<ConstRefSharedConstPtrCallback>\x1b[01;31m\x1b[K(callback_variant_)\x1b[m\x1b[K ||\n'}
[2.038023] (kruisee_lidar) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.038058] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:941:70:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.038098] (kruisee_lidar) StderrLine: {'line': b'  941 |       std::holds_alternative<ConstRefSharedConstPtrWithInfoCallback>\x1b[01;31m\x1b[K(callback_variant_)\x1b[m\x1b[K;\n'}
[2.038133] (kruisee_lidar) StderrLine: {'line': b'      |                                                                     \x1b[01;31m\x1b[K~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.102987] (-) TimerEvent: {}
[2.203244] (-) TimerEvent: {}
[2.294260] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch(std::shared_ptr<typename rclcpp::TypeAdapter<MessageT>::ros_message_type>, const rclcpp::MessageInfo&) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename rclcpp::TypeAdapter<MessageT>::ros_message_type = std_msgs::msg::String_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.294465] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:343:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::handle_message(std::shared_ptr<void>&, const rclcpp::MessageInfo&) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>; SubscribedT = std_msgs::msg::String_<std::allocator<void> >; ROSMessageT = std_msgs::msg::String_<std::allocator<void> >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.294521] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:325:3:\x1b[m\x1b[K   required from here\n'}
[2.294583] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:497:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.294621] (kruisee_lidar) StderrLine: {'line': b'  497 |     if (\x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K.index() == 0) {\n'}
[2.294657] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.294691] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:498:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.294727] (kruisee_lidar) StderrLine: {'line': b'  498 |       if (std::get<0>(\x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K) == nullptr) {\n'}
[2.294762] (kruisee_lidar) StderrLine: {'line': b'      |                       \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.294795] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.294833] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:358:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::handle_serialized_message(const std::shared_ptr<rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>; SubscribedT = std_msgs::msg::String_<std::allocator<void> >; ROSMessageT = std_msgs::msg::String_<std::allocator<void> >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::String_<std::allocator<void> >, std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.294875] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:353:3:\x1b[m\x1b[K   required from here\n'}
[2.294909] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:597:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.294944] (kruisee_lidar) StderrLine: {'line': b'  597 |     if (\x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K.index() == 0) {\n'}
[2.294976] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.295010] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:598:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.295043] (kruisee_lidar) StderrLine: {'line': b'  598 |       if (std::get<0>(\x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K) == nullptr) {\n'}
[2.295076] (kruisee_lidar) StderrLine: {'line': b'      |                       \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.301835] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch_intra_process(std::shared_ptr<const typename rclcpp::TypeAdapter<MessageT>::custom_type>, const rclcpp::MessageInfo&) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename rclcpp::TypeAdapter<MessageT>::custom_type = std_msgs::msg::String_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.302114] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/subscription_intra_process.hpp:166:43:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename std::enable_if<(! std::is_same<T, rcutils_uint8_array_s>::value), void>::type rclcpp::experimental::SubscriptionIntraProcess<MessageT, SubscribedType, SubscribedTypeAlloc, SubscribedTypeDeleter, ROSMessageType, Alloc>::execute_impl(std::shared_ptr<void>&) [with T = std_msgs::msg::String_<std::allocator<void> >; MessageT = std_msgs::msg::String_<std::allocator<void> >; SubscribedType = std_msgs::msg::String_<std::allocator<void> >; SubscribedTypeAlloc = std::allocator<std_msgs::msg::String_<std::allocator<void> > >; SubscribedTypeDeleter = std::default_delete<std_msgs::msg::String_<std::allocator<void> > >; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; Alloc = std::allocator<void>; typename std::enable_if<(! std::is_same<T, rcutils_uint8_array_s>::value), void>::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.302187] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/subscription_intra_process.hpp:137:33:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::experimental::SubscriptionIntraProcess<MessageT, SubscribedType, SubscribedTypeAlloc, SubscribedTypeDeleter, ROSMessageType, Alloc>::execute(std::shared_ptr<void>&) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; SubscribedType = std_msgs::msg::String_<std::allocator<void> >; SubscribedTypeAlloc = std::allocator<std_msgs::msg::String_<std::allocator<void> > >; SubscribedTypeDeleter = std::default_delete<std_msgs::msg::String_<std::allocator<void> > >; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; Alloc = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.302230] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/subscription_intra_process.hpp:135:8:\x1b[m\x1b[K   required from here\n'}
[2.302268] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:676:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.302327] (kruisee_lidar) StderrLine: {'line': b'  676 |     if (\x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K.index() == 0) {\n'}
[2.302362] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.302407] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:677:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.302447] (kruisee_lidar) StderrLine: {'line': b'  677 |       if (std::get<0>(\x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K) == nullptr) {\n'}
[2.302482] (kruisee_lidar) StderrLine: {'line': b'      |                       \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.302518] (kruisee_lidar) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::dispatch_intra_process(std::unique_ptr<typename rclcpp::TypeAdapter<MessageT>::custom_type, typename rclcpp::detail::MessageDeleterHelper<typename rclcpp::TypeAdapter<MessageT>::custom_type, AllocatorT>::Deleter>, const rclcpp::MessageInfo&) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; AllocatorT = std::allocator<void>; typename rclcpp::detail::MessageDeleterHelper<typename rclcpp::TypeAdapter<MessageT>::custom_type, AllocatorT>::Deleter = std::default_delete<std_msgs::msg::String_<std::allocator<void> > >; typename rclcpp::TypeAdapter<MessageT>::custom_type = std_msgs::msg::String_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.302558] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/subscription_intra_process.hpp:169:43:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename std::enable_if<(! std::is_same<T, rcutils_uint8_array_s>::value), void>::type rclcpp::experimental::SubscriptionIntraProcess<MessageT, SubscribedType, SubscribedTypeAlloc, SubscribedTypeDeleter, ROSMessageType, Alloc>::execute_impl(std::shared_ptr<void>&) [with T = std_msgs::msg::String_<std::allocator<void> >; MessageT = std_msgs::msg::String_<std::allocator<void> >; SubscribedType = std_msgs::msg::String_<std::allocator<void> >; SubscribedTypeAlloc = std::allocator<std_msgs::msg::String_<std::allocator<void> > >; SubscribedTypeDeleter = std::default_delete<std_msgs::msg::String_<std::allocator<void> > >; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; Alloc = std::allocator<void>; typename std::enable_if<(! std::is_same<T, rcutils_uint8_array_s>::value), void>::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.302597] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/subscription_intra_process.hpp:137:33:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::experimental::SubscriptionIntraProcess<MessageT, SubscribedType, SubscribedTypeAlloc, SubscribedTypeDeleter, ROSMessageType, Alloc>::execute(std::shared_ptr<void>&) [with MessageT = std_msgs::msg::String_<std::allocator<void> >; SubscribedType = std_msgs::msg::String_<std::allocator<void> >; SubscribedTypeAlloc = std::allocator<std_msgs::msg::String_<std::allocator<void> > >; SubscribedTypeDeleter = std::default_delete<std_msgs::msg::String_<std::allocator<void> > >; ROSMessageType = std_msgs::msg::String_<std::allocator<void> >; Alloc = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.302637] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/subscription_intra_process.hpp:135:8:\x1b[m\x1b[K   required from here\n'}
[2.302672] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:806:9:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.302707] (kruisee_lidar) StderrLine: {'line': b'  806 |     if (\x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K.index() == 0) {\n'}
[2.302742] (kruisee_lidar) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.302777] (kruisee_lidar) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:807:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::callback_variant_\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.302815] (kruisee_lidar) StderrLine: {'line': b'  807 |       if (std::get<0>(\x1b[01;31m\x1b[Kcallback_variant_\x1b[m\x1b[K) == nullptr) {\n'}
[2.302850] (kruisee_lidar) StderrLine: {'line': b'      |                       \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.303311] (-) TimerEvent: {}
[2.403503] (-) TimerEvent: {}
[2.503775] (-) TimerEvent: {}
[2.604044] (-) TimerEvent: {}
[2.704323] (-) TimerEvent: {}
[2.743841] (kruisee_lidar) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/kruisee_lidar_node.dir/build.make:90: CMakeFiles/kruisee_lidar_node.dir/top/node.cc.o] Error 1\n'}
[2.744081] (kruisee_lidar) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:154: CMakeFiles/kruisee_lidar_node.dir/all] Error 2\n'}
[2.744169] (kruisee_lidar) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[2.745654] (kruisee_lidar) CommandEnded: {'returncode': 2}
[2.770162] (kruisee_lidar) JobEnded: {'identifier': 'kruisee_lidar', 'rc': 2}
[2.864062] (-) TimerEvent: {}
[2.864157] (-) EventReactorShutdown: {}
